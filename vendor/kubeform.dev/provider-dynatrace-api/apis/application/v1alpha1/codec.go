/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecFailureRate{}).Type1()):            AnomaliesSpecFailureRateCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecFailureRateAuto{}).Type1()):        AnomaliesSpecFailureRateAutoCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecFailureRateThresholds{}).Type1()):  AnomaliesSpecFailureRateThresholdsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecResponseTime{}).Type1()):           AnomaliesSpecResponseTimeCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecResponseTimeAuto{}).Type1()):       AnomaliesSpecResponseTimeAutoCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecResponseTimeThresholds{}).Type1()): AnomaliesSpecResponseTimeThresholdsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecTraffic{}).Type1()):                AnomaliesSpecTrafficCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecTrafficDrops{}).Type1()):           AnomaliesSpecTrafficDropsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecTrafficSpikes{}).Type1()):          AnomaliesSpecTrafficSpikesCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecFailureRate{}).Type1()):            AnomaliesSpecFailureRateCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecFailureRateAuto{}).Type1()):        AnomaliesSpecFailureRateAutoCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecFailureRateThresholds{}).Type1()):  AnomaliesSpecFailureRateThresholdsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecResponseTime{}).Type1()):           AnomaliesSpecResponseTimeCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecResponseTimeAuto{}).Type1()):       AnomaliesSpecResponseTimeAutoCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecResponseTimeThresholds{}).Type1()): AnomaliesSpecResponseTimeThresholdsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecTraffic{}).Type1()):                AnomaliesSpecTrafficCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecTrafficDrops{}).Type1()):           AnomaliesSpecTrafficDropsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecTrafficSpikes{}).Type1()):          AnomaliesSpecTrafficSpikesCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type AnomaliesSpecFailureRateCodec struct {
}

func (AnomaliesSpecFailureRateCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AnomaliesSpecFailureRate)(ptr) == nil
}

func (AnomaliesSpecFailureRateCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AnomaliesSpecFailureRate)(ptr)
	var objs []AnomaliesSpecFailureRate
	if obj != nil {
		objs = []AnomaliesSpecFailureRate{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecFailureRate{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AnomaliesSpecFailureRateCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AnomaliesSpecFailureRate)(ptr) = AnomaliesSpecFailureRate{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AnomaliesSpecFailureRate

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecFailureRate{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AnomaliesSpecFailureRate)(ptr) = objs[0]
			} else {
				*(*AnomaliesSpecFailureRate)(ptr) = AnomaliesSpecFailureRate{}
			}
		} else {
			*(*AnomaliesSpecFailureRate)(ptr) = AnomaliesSpecFailureRate{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj AnomaliesSpecFailureRate

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecFailureRate{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*AnomaliesSpecFailureRate)(ptr) = obj
		} else {
			*(*AnomaliesSpecFailureRate)(ptr) = AnomaliesSpecFailureRate{}
		}
	default:
		iter.ReportError("decode AnomaliesSpecFailureRate", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AnomaliesSpecFailureRateAutoCodec struct {
}

func (AnomaliesSpecFailureRateAutoCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AnomaliesSpecFailureRateAuto)(ptr) == nil
}

func (AnomaliesSpecFailureRateAutoCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AnomaliesSpecFailureRateAuto)(ptr)
	var objs []AnomaliesSpecFailureRateAuto
	if obj != nil {
		objs = []AnomaliesSpecFailureRateAuto{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecFailureRateAuto{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AnomaliesSpecFailureRateAutoCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AnomaliesSpecFailureRateAuto)(ptr) = AnomaliesSpecFailureRateAuto{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AnomaliesSpecFailureRateAuto

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecFailureRateAuto{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AnomaliesSpecFailureRateAuto)(ptr) = objs[0]
			} else {
				*(*AnomaliesSpecFailureRateAuto)(ptr) = AnomaliesSpecFailureRateAuto{}
			}
		} else {
			*(*AnomaliesSpecFailureRateAuto)(ptr) = AnomaliesSpecFailureRateAuto{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj AnomaliesSpecFailureRateAuto

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecFailureRateAuto{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*AnomaliesSpecFailureRateAuto)(ptr) = obj
		} else {
			*(*AnomaliesSpecFailureRateAuto)(ptr) = AnomaliesSpecFailureRateAuto{}
		}
	default:
		iter.ReportError("decode AnomaliesSpecFailureRateAuto", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AnomaliesSpecFailureRateThresholdsCodec struct {
}

func (AnomaliesSpecFailureRateThresholdsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AnomaliesSpecFailureRateThresholds)(ptr) == nil
}

func (AnomaliesSpecFailureRateThresholdsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AnomaliesSpecFailureRateThresholds)(ptr)
	var objs []AnomaliesSpecFailureRateThresholds
	if obj != nil {
		objs = []AnomaliesSpecFailureRateThresholds{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecFailureRateThresholds{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AnomaliesSpecFailureRateThresholdsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AnomaliesSpecFailureRateThresholds)(ptr) = AnomaliesSpecFailureRateThresholds{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AnomaliesSpecFailureRateThresholds

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecFailureRateThresholds{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AnomaliesSpecFailureRateThresholds)(ptr) = objs[0]
			} else {
				*(*AnomaliesSpecFailureRateThresholds)(ptr) = AnomaliesSpecFailureRateThresholds{}
			}
		} else {
			*(*AnomaliesSpecFailureRateThresholds)(ptr) = AnomaliesSpecFailureRateThresholds{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj AnomaliesSpecFailureRateThresholds

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecFailureRateThresholds{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*AnomaliesSpecFailureRateThresholds)(ptr) = obj
		} else {
			*(*AnomaliesSpecFailureRateThresholds)(ptr) = AnomaliesSpecFailureRateThresholds{}
		}
	default:
		iter.ReportError("decode AnomaliesSpecFailureRateThresholds", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AnomaliesSpecResponseTimeCodec struct {
}

func (AnomaliesSpecResponseTimeCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AnomaliesSpecResponseTime)(ptr) == nil
}

func (AnomaliesSpecResponseTimeCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AnomaliesSpecResponseTime)(ptr)
	var objs []AnomaliesSpecResponseTime
	if obj != nil {
		objs = []AnomaliesSpecResponseTime{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecResponseTime{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AnomaliesSpecResponseTimeCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AnomaliesSpecResponseTime)(ptr) = AnomaliesSpecResponseTime{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AnomaliesSpecResponseTime

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecResponseTime{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AnomaliesSpecResponseTime)(ptr) = objs[0]
			} else {
				*(*AnomaliesSpecResponseTime)(ptr) = AnomaliesSpecResponseTime{}
			}
		} else {
			*(*AnomaliesSpecResponseTime)(ptr) = AnomaliesSpecResponseTime{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj AnomaliesSpecResponseTime

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecResponseTime{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*AnomaliesSpecResponseTime)(ptr) = obj
		} else {
			*(*AnomaliesSpecResponseTime)(ptr) = AnomaliesSpecResponseTime{}
		}
	default:
		iter.ReportError("decode AnomaliesSpecResponseTime", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AnomaliesSpecResponseTimeAutoCodec struct {
}

func (AnomaliesSpecResponseTimeAutoCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AnomaliesSpecResponseTimeAuto)(ptr) == nil
}

func (AnomaliesSpecResponseTimeAutoCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AnomaliesSpecResponseTimeAuto)(ptr)
	var objs []AnomaliesSpecResponseTimeAuto
	if obj != nil {
		objs = []AnomaliesSpecResponseTimeAuto{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecResponseTimeAuto{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AnomaliesSpecResponseTimeAutoCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AnomaliesSpecResponseTimeAuto)(ptr) = AnomaliesSpecResponseTimeAuto{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AnomaliesSpecResponseTimeAuto

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecResponseTimeAuto{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AnomaliesSpecResponseTimeAuto)(ptr) = objs[0]
			} else {
				*(*AnomaliesSpecResponseTimeAuto)(ptr) = AnomaliesSpecResponseTimeAuto{}
			}
		} else {
			*(*AnomaliesSpecResponseTimeAuto)(ptr) = AnomaliesSpecResponseTimeAuto{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj AnomaliesSpecResponseTimeAuto

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecResponseTimeAuto{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*AnomaliesSpecResponseTimeAuto)(ptr) = obj
		} else {
			*(*AnomaliesSpecResponseTimeAuto)(ptr) = AnomaliesSpecResponseTimeAuto{}
		}
	default:
		iter.ReportError("decode AnomaliesSpecResponseTimeAuto", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AnomaliesSpecResponseTimeThresholdsCodec struct {
}

func (AnomaliesSpecResponseTimeThresholdsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AnomaliesSpecResponseTimeThresholds)(ptr) == nil
}

func (AnomaliesSpecResponseTimeThresholdsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AnomaliesSpecResponseTimeThresholds)(ptr)
	var objs []AnomaliesSpecResponseTimeThresholds
	if obj != nil {
		objs = []AnomaliesSpecResponseTimeThresholds{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecResponseTimeThresholds{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AnomaliesSpecResponseTimeThresholdsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AnomaliesSpecResponseTimeThresholds)(ptr) = AnomaliesSpecResponseTimeThresholds{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AnomaliesSpecResponseTimeThresholds

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecResponseTimeThresholds{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AnomaliesSpecResponseTimeThresholds)(ptr) = objs[0]
			} else {
				*(*AnomaliesSpecResponseTimeThresholds)(ptr) = AnomaliesSpecResponseTimeThresholds{}
			}
		} else {
			*(*AnomaliesSpecResponseTimeThresholds)(ptr) = AnomaliesSpecResponseTimeThresholds{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj AnomaliesSpecResponseTimeThresholds

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecResponseTimeThresholds{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*AnomaliesSpecResponseTimeThresholds)(ptr) = obj
		} else {
			*(*AnomaliesSpecResponseTimeThresholds)(ptr) = AnomaliesSpecResponseTimeThresholds{}
		}
	default:
		iter.ReportError("decode AnomaliesSpecResponseTimeThresholds", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AnomaliesSpecTrafficCodec struct {
}

func (AnomaliesSpecTrafficCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AnomaliesSpecTraffic)(ptr) == nil
}

func (AnomaliesSpecTrafficCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AnomaliesSpecTraffic)(ptr)
	var objs []AnomaliesSpecTraffic
	if obj != nil {
		objs = []AnomaliesSpecTraffic{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecTraffic{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AnomaliesSpecTrafficCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AnomaliesSpecTraffic)(ptr) = AnomaliesSpecTraffic{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AnomaliesSpecTraffic

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecTraffic{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AnomaliesSpecTraffic)(ptr) = objs[0]
			} else {
				*(*AnomaliesSpecTraffic)(ptr) = AnomaliesSpecTraffic{}
			}
		} else {
			*(*AnomaliesSpecTraffic)(ptr) = AnomaliesSpecTraffic{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj AnomaliesSpecTraffic

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecTraffic{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*AnomaliesSpecTraffic)(ptr) = obj
		} else {
			*(*AnomaliesSpecTraffic)(ptr) = AnomaliesSpecTraffic{}
		}
	default:
		iter.ReportError("decode AnomaliesSpecTraffic", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AnomaliesSpecTrafficDropsCodec struct {
}

func (AnomaliesSpecTrafficDropsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AnomaliesSpecTrafficDrops)(ptr) == nil
}

func (AnomaliesSpecTrafficDropsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AnomaliesSpecTrafficDrops)(ptr)
	var objs []AnomaliesSpecTrafficDrops
	if obj != nil {
		objs = []AnomaliesSpecTrafficDrops{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecTrafficDrops{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AnomaliesSpecTrafficDropsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AnomaliesSpecTrafficDrops)(ptr) = AnomaliesSpecTrafficDrops{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AnomaliesSpecTrafficDrops

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecTrafficDrops{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AnomaliesSpecTrafficDrops)(ptr) = objs[0]
			} else {
				*(*AnomaliesSpecTrafficDrops)(ptr) = AnomaliesSpecTrafficDrops{}
			}
		} else {
			*(*AnomaliesSpecTrafficDrops)(ptr) = AnomaliesSpecTrafficDrops{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj AnomaliesSpecTrafficDrops

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecTrafficDrops{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*AnomaliesSpecTrafficDrops)(ptr) = obj
		} else {
			*(*AnomaliesSpecTrafficDrops)(ptr) = AnomaliesSpecTrafficDrops{}
		}
	default:
		iter.ReportError("decode AnomaliesSpecTrafficDrops", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AnomaliesSpecTrafficSpikesCodec struct {
}

func (AnomaliesSpecTrafficSpikesCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AnomaliesSpecTrafficSpikes)(ptr) == nil
}

func (AnomaliesSpecTrafficSpikesCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AnomaliesSpecTrafficSpikes)(ptr)
	var objs []AnomaliesSpecTrafficSpikes
	if obj != nil {
		objs = []AnomaliesSpecTrafficSpikes{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecTrafficSpikes{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AnomaliesSpecTrafficSpikesCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AnomaliesSpecTrafficSpikes)(ptr) = AnomaliesSpecTrafficSpikes{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AnomaliesSpecTrafficSpikes

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecTrafficSpikes{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AnomaliesSpecTrafficSpikes)(ptr) = objs[0]
			} else {
				*(*AnomaliesSpecTrafficSpikes)(ptr) = AnomaliesSpecTrafficSpikes{}
			}
		} else {
			*(*AnomaliesSpecTrafficSpikes)(ptr) = AnomaliesSpecTrafficSpikes{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj AnomaliesSpecTrafficSpikes

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecTrafficSpikes{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*AnomaliesSpecTrafficSpikes)(ptr) = obj
		} else {
			*(*AnomaliesSpecTrafficSpikes)(ptr) = AnomaliesSpecTrafficSpikes{}
		}
	default:
		iter.ReportError("decode AnomaliesSpecTrafficSpikes", "unexpected JSON type")
	}
}
