/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ErrorRules struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ErrorRulesSpec   `json:"spec,omitempty"`
	Status            ErrorRulesStatus `json:"status,omitempty"`
}

type ErrorRulesSpecCustomErrorsRule struct {
	// Capture (`true`) or ignore (`false`) the error
	// +optional
	Capture *bool `json:"capture,omitempty" tf:"capture"`
	// Include (`true`) or exclude (`false`) the error in Davis AI [problem detection and analysis](https://dt-url.net/a963kd2)
	// +optional
	CustomAlerting *bool `json:"customAlerting,omitempty" tf:"custom_alerting"`
	// Include (`true`) or exclude (`false`) the error in Apdex calculation
	// +optional
	ImpactApdex *bool `json:"impactApdex,omitempty" tf:"impact_apdex"`
	// The matching operation for the **keyPattern**. Possible values are `BEGINS_WITH`, `CONTAINS`, `ENDS_WITH` and `EQUALS`
	// +optional
	KeyMatcher *string `json:"keyMatcher,omitempty" tf:"key_matcher"`
	// The key of the error to look for
	// +optional
	KeyPattern *string `json:"keyPattern,omitempty" tf:"key_pattern"`
	// The matching operation for the **valuePattern**. Possible values are `BEGINS_WITH`, `CONTAINS`, `ENDS_WITH` and `EQUALS`.
	// +optional
	ValueMatcher *string `json:"valueMatcher,omitempty" tf:"value_matcher"`
	// The value of the error to look for
	// +optional
	ValuePattern *string `json:"valuePattern,omitempty" tf:"value_pattern"`
}

type ErrorRulesSpecCustomErrors struct {
	// Configuration of the custom error in the web application
	// +kubebuilder:validation:MinItems=1
	Rule []ErrorRulesSpecCustomErrorsRule `json:"rule" tf:"rule"`
}

type ErrorRulesSpecHttpErrorsRule struct {
	// Capture (`true`) or ignore (`false`) the error
	// +optional
	Capture *bool `json:"capture,omitempty" tf:"capture"`
	// If `true`, match by errors that have CSP Rule violations
	// +optional
	ConsiderBlockedRequests *bool `json:"considerBlockedRequests,omitempty" tf:"consider_blocked_requests"`
	// Include (`true`) or exclude (`false`) the error in Davis AI [problem detection and analysis](https://dt-url.net/a963kd2)
	// +optional
	ConsiderForAi *bool `json:"considerForAi,omitempty" tf:"consider_for_ai"`
	// If `true`, match by errors that have unknown HTTP status code
	// +optional
	ConsiderUnknownErrorCode *bool `json:"considerUnknownErrorCode,omitempty" tf:"consider_unknown_error_code"`
	// The HTTP status code or status code range to match by.
	//
	// This field is required if **considerUnknownErrorCode** AND **considerBlockedRequests** are both set to `false`
	// +optional
	ErrorCodes *string `json:"errorCodes,omitempty" tf:"error_codes"`
	// The matching rule for the URL. Popssible values are `BEGINS_WITH`, `CONTAINS`, `ENDS_WITH` and `EQUALS`.
	// +optional
	Filter *string `json:"filter,omitempty" tf:"filter"`
	// If `true`, filter errors by URL
	// +optional
	FilterByURL *bool `json:"filterByURL,omitempty" tf:"filter_by_url"`
	// Include (`true`) or exclude (`false`) the error in Apdex calculation
	// +optional
	ImpactApdex *bool `json:"impactApdex,omitempty" tf:"impact_apdex"`
	// The URL to look for
	// +optional
	Url *string `json:"url,omitempty" tf:"url"`
}

type ErrorRulesSpecHttpErrors struct {
	// Configuration of the HTTP error in the web application
	// +kubebuilder:validation:MinItems=1
	Rule []ErrorRulesSpecHttpErrorsRule `json:"rule" tf:"rule"`
}

type ErrorRulesSpec struct {
	State *ErrorRulesSpecResource `json:"state,omitempty" tf:"-"`

	Resource ErrorRulesSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type ErrorRulesSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// An ordered list of HTTP errors.
	//
	//  Rules are evaluated from top to bottom; the first matching rule applies
	// +optional
	CustomErrors *ErrorRulesSpecCustomErrors `json:"customErrors,omitempty" tf:"custom_errors"`
	// An ordered list of HTTP errors.
	//
	//  Rules are evaluated from top to bottom; the first matching rule applies
	// +optional
	HttpErrors *ErrorRulesSpecHttpErrors `json:"httpErrors,omitempty" tf:"http_errors"`
	// Exclude (`true`) or include (`false`) custom errors listed in **customErrorRules** in Apdex calculation
	// +optional
	IgnoreCustomErrorsApdex *bool `json:"ignoreCustomErrorsApdex,omitempty" tf:"ignore_custom_errors_apdex"`
	// Exclude (`true`) or include (`false`) HTTP errors listed in **httpErrorRules** in Apdex calculation
	// +optional
	IgnoreHTTPErrorsApdex *bool `json:"ignoreHTTPErrorsApdex,omitempty" tf:"ignore_http_errors_apdex"`
	// Exclude (`true`) or include (`false`) JavaScript errors in Apdex calculation
	// +optional
	IgnoreJsErrorsApdex *bool `json:"ignoreJsErrorsApdex,omitempty" tf:"ignore_js_errors_apdex"`
	// The EntityID of the the WebApplication
	// +optional
	WebApplicationID *string `json:"webApplicationID,omitempty" tf:"web_application_id"`
}

type ErrorRulesStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ErrorRulesList is a list of ErrorRuless
type ErrorRulesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ErrorRules CRD objects
	Items []ErrorRules `json:"items,omitempty"`
}
