/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Anomalies struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AnomaliesSpec   `json:"spec,omitempty"`
	Status            AnomaliesStatus `json:"status,omitempty"`
}

type AnomaliesSpecDiskName struct {
	// Possible values are: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`, `EQUALS` and `STARTS_WITH`
	Operator *string `json:"operator" tf:"operator"`
	// Value to compare to
	Value *string `json:"value" tf:"value"`
}

type AnomaliesSpecTagsFilter struct {
	// The origin of the tag, such as AWS or Cloud Foundry. Custom tags use the `CONTEXTLESS` value
	Context *string `json:"context" tf:"context"`
	// The key of the tag. Custom tags have the tag value here
	Key *string `json:"key" tf:"key"`
	// The value of the tag. Not applicable to custom tags
	// +optional
	Value *string `json:"value,omitempty" tf:"value"`
}

type AnomaliesSpecTags struct {
	// A Tag Filter
	// +optional
	Filter []AnomaliesSpecTagsFilter `json:"filter,omitempty" tf:"filter"`
}

type AnomaliesSpec struct {
	State *AnomaliesSpecResource `json:"state,omitempty" tf:"-"`

	Resource AnomaliesSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type AnomaliesSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Narrows the rule usage down to disks, matching the specified criteria
	// +optional
	DiskName *AnomaliesSpecDiskName `json:"diskName,omitempty" tf:"disk_name"`
	// Disk event rule enabled/disabled
	Enabled *bool `json:"enabled" tf:"enabled"`
	// Narrows the rule usage down to disks that run on hosts that themselves run on the specified host group
	// +optional
	HostGroupID *string `json:"hostGroupID,omitempty" tf:"host_group_id"`
	// The metric to monitor
	Metric *string `json:"metric" tf:"metric"`
	// The name of the disk event rule
	Name *string `json:"name" tf:"name"`
	// The number of samples to evaluate
	Samples *int64 `json:"samples" tf:"samples"`
	// Narrows the rule usage down to the hosts matching the specified tags
	// +optional
	Tags *AnomaliesSpecTags `json:"tags,omitempty" tf:"tags"`
	// The threshold to trigger disk event.   * A percentage for `LowDiskSpace` or `LowInodes` metrics.   * In milliseconds for `ReadTimeExceeding` or `WriteTimeExceeding` metrics
	Threshold *float64 `json:"threshold" tf:"threshold"`
	// The number of samples that must violate the threshold to trigger an event. Must not exceed the number of evaluated samples
	ViolatingSamples *int64 `json:"violatingSamples" tf:"violating_samples"`
}

type AnomaliesStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// AnomaliesList is a list of Anomaliess
type AnomaliesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Anomalies CRD objects
	Items []Anomalies `json:"items,omitempty"`
}
