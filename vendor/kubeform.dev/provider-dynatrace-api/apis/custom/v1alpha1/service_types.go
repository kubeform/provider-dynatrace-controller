/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Service struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServiceSpec   `json:"spec,omitempty"`
	Status            ServiceStatus `json:"status,omitempty"`
}

type ServiceSpecRuleClass struct {
	// Matcher applying to the class name (ENDS_WITH, EQUALS or STARTS_WITH). STARTS_WITH can only be used if there is at least one annotation defined. Default value is EQUALS
	// +optional
	Match *string `json:"match,omitempty" tf:"match"`
	// The full name of the class / the name to match the class name with
	Name *string `json:"name" tf:"name"`
}

type ServiceSpecRuleFile struct {
	// Matcher applying to the file name (ENDS_WITH, EQUALS or STARTS_WITH). Default value is ENDS_WITH (if applicable)
	// +optional
	Match *string `json:"match,omitempty" tf:"match"`
	// The full name of the file / the name to match the file name with
	Name *string `json:"name" tf:"name"`
}

type ServiceSpecRuleMethod struct {
	// Fully qualified types of argument the method expects
	// +optional
	Arguments []string `json:"arguments,omitempty" tf:"arguments"`
	// The ID of the method rule
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// The method to instrument
	Name *string `json:"name" tf:"name"`
	// Fully qualified type the method returns
	// +optional
	Returns *string `json:"returns,omitempty" tf:"returns"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns"`
}

type ServiceSpecRule struct {
	// Additional annotations filter of the rule. Only classes where all listed annotations are available in the class itself or any of its superclasses are instrumented. Not applicable to PHP
	// +optional
	Annotations []string `json:"annotations,omitempty" tf:"annotations"`
	// The fully qualified class or interface to instrument (or a substring if matching to a string). Required for Java and .NET custom services. Not applicable to PHP
	// +optional
	Class *ServiceSpecRuleClass `json:"class,omitempty" tf:"class"`
	// Rule enabled/disabled
	Enabled *bool `json:"enabled" tf:"enabled"`
	// The PHP file containing the class or methods to instrument. Required for PHP custom service. Not applicable to Java and .NET
	// +optional
	File *ServiceSpecRuleFile `json:"file,omitempty" tf:"file"`
	// The ID of the detection rule
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// methods to instrument
	Method []ServiceSpecRuleMethod `json:"method" tf:"method"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns"`
}

type ServiceSpec struct {
	State *ServiceSpecResource `json:"state,omitempty" tf:"-"`

	Resource ServiceSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type ServiceSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Custom service enabled/disabled
	Enabled *bool `json:"enabled" tf:"enabled"`
	// The name of the custom service, displayed in the UI
	Name *string `json:"name" tf:"name"`
	// The list of process groups the custom service should belong to
	// +optional
	ProcessGroups []string `json:"processGroups,omitempty" tf:"process_groups"`
	// The queue entry point flag. Set to `true` for custom messaging services
	// +optional
	QueueEntryPoint *bool `json:"queueEntryPoint,omitempty" tf:"queue_entry_point"`
	// The queue entry point type (IBM_MQ, JMS, KAFKA, MSMQ or RABBIT_MQ)
	// +optional
	QueueEntryPointType *string `json:"queueEntryPointType,omitempty" tf:"queue_entry_point_type"`
	// The list of rules defining the custom service
	// +optional
	Rule []ServiceSpecRule `json:"rule,omitempty" tf:"rule"`
	// Matcher applying to the file name (ENDS_WITH, EQUALS or STARTS_WITH). Default value is ENDS_WITH (if applicable)
	Technology *string `json:"technology" tf:"technology"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns"`
}

type ServiceStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ServiceList is a list of Services
type ServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Service CRD objects
	Items []Service `json:"items,omitempty"`
}
