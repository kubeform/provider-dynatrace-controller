/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Monitor struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MonitorSpec   `json:"spec,omitempty"`
	Status            MonitorStatus `json:"status,omitempty"`
}

type MonitorSpecAnomalyDetectionLoadingTimeThresholdsThresholdsThreshold struct {
	// Specify the event to which an ACTION threshold applies
	// +optional
	EventIndex *int64 `json:"eventIndex,omitempty" tf:"event_index"`
	// Specify the request to which an ACTION threshold applies
	// +optional
	RequestIndex *int64 `json:"requestIndex,omitempty" tf:"request_index"`
	// The type of the threshold: `TOTAL` (total loading time) or `ACTION` (action loading time)
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
	// Notify if monitor takes longer than *X* milliseconds to load
	ValueMs *int64 `json:"valueMs" tf:"value_ms"`
}

type MonitorSpecAnomalyDetectionLoadingTimeThresholdsThresholds struct {
	// The list of performance threshold rules
	// +kubebuilder:validation:MinItems=1
	Threshold []MonitorSpecAnomalyDetectionLoadingTimeThresholdsThresholdsThreshold `json:"threshold" tf:"threshold"`
}

type MonitorSpecAnomalyDetectionLoadingTimeThresholds struct {
	// Performance threshold is enabled (`true`) or disabled (`false`)
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
	// The list of performance threshold rules
	// +optional
	Thresholds []MonitorSpecAnomalyDetectionLoadingTimeThresholdsThresholds `json:"thresholds,omitempty" tf:"thresholds"`
}

type MonitorSpecAnomalyDetectionOutageHandlingLocalOutagePolicy struct {
	// The number of affected locations to trigger an alert
	AffectedLocations *int64 `json:"affectedLocations" tf:"affected_locations"`
	// The number of consecutive fails to trigger an alert
	ConsecutiveRuns *int64 `json:"consecutiveRuns" tf:"consecutive_runs"`
}

type MonitorSpecAnomalyDetectionOutageHandling struct {
	// When enabled (`true`), generate a problem and send an alert when the monitor is unavailable at all configured locations
	// +optional
	GlobalOutage *bool `json:"globalOutage,omitempty" tf:"global_outage"`
	// When enabled (`true`), generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location
	// +optional
	LocalOutage *bool `json:"localOutage,omitempty" tf:"local_outage"`
	// Local outage handling configuration.
	//
	//  Alert if **affectedLocations** of locations are unable to access the web application **consecutiveRuns** times consecutively
	// +optional
	LocalOutagePolicy []MonitorSpecAnomalyDetectionOutageHandlingLocalOutagePolicy `json:"localOutagePolicy,omitempty" tf:"local_outage_policy"`
	// Schedule retry if browser monitor execution results in a fail. For HTTP monitors this property is ignored
	// +optional
	RetryOnError *bool `json:"retryOnError,omitempty" tf:"retry_on_error"`
}

type MonitorSpecAnomalyDetection struct {
	// Thresholds for loading times
	// +optional
	LoadingTimeThresholds []MonitorSpecAnomalyDetectionLoadingTimeThresholds `json:"loadingTimeThresholds,omitempty" tf:"loading_time_thresholds"`
	// Outage handling configuration
	// +optional
	OutageHandling []MonitorSpecAnomalyDetectionOutageHandling `json:"outageHandling,omitempty" tf:"outage_handling"`
}

type MonitorSpecScriptRequestConfigurationHeadersHeader struct {
	// The key of the header
	Name *string `json:"name" tf:"name"`
	// The value of the header
	Value *string `json:"value" tf:"value"`
}

type MonitorSpecScriptRequestConfigurationHeaders struct {
	// contains an HTTP header of the request
	// +kubebuilder:validation:MinItems=1
	Header []MonitorSpecScriptRequestConfigurationHeadersHeader `json:"header" tf:"header"`
}

type MonitorSpecScriptRequestConfiguration struct {
	// If set to `false`, then the monitor fails with invalid SSL certificates.
	//
	// If not set, the `false` option is used
	// +optional
	AcceptAnyCertificate *bool `json:"acceptAnyCertificate,omitempty" tf:"accept_any_certificate"`
	// If set to `false`, redirects are reported as successful requests with response code 3xx.
	//
	// If not set, the `false` option is used.
	// +optional
	FollowRedirects *bool `json:"followRedirects,omitempty" tf:"follow_redirects"`
	// The setup of the monitor
	// +optional
	Headers *MonitorSpecScriptRequestConfigurationHeaders `json:"headers,omitempty" tf:"headers"`
	// The User agent of the request
	// +optional
	UserAgent *string `json:"userAgent,omitempty" tf:"user_agent"`
}

type MonitorSpecScriptRequestValidationRule struct {
	//  The validation condition. `true` means validation succeeds if the specified content/element is found. `false` means validation fails if the specified content/element is found. Always specify `false` for `certificateExpiryDateConstraint` to fail the monitor if SSL certificate expiry is within the specified number of days
	// +optional
	PassIfFound *bool `json:"passIfFound,omitempty" tf:"pass_if_found"`
	// The type of the rule. Possible values are `patternConstraint`, `regexConstraint`, `httpStatusesList` and `certificateExpiryDateConstraint`
	Type *string `json:"type" tf:"type"`
	// The content to look for
	Value *string `json:"value" tf:"value"`
}

type MonitorSpecScriptRequestValidation struct {
	// A list of validation rules
	// +kubebuilder:validation:MinItems=1
	Rule []MonitorSpecScriptRequestValidationRule `json:"rule" tf:"rule"`
}

type MonitorSpecScriptRequest struct {
	// The body of the HTTP request.
	// +optional
	Body *string `json:"body,omitempty" tf:"body"`
	// The setup of the monitor
	// +optional
	Configuration *MonitorSpecScriptRequestConfiguration `json:"configuration,omitempty" tf:"configuration"`
	// A short description of the event to appear in the web UI.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// The HTTP method of the request.
	Method *string `json:"method" tf:"method"`
	// Javascript code to execute after sending the request.
	// +optional
	PostProcessing *string `json:"postProcessing,omitempty" tf:"post_processing"`
	// Javascript code to execute before sending the request.
	// +optional
	PreProcessing *string `json:"preProcessing,omitempty" tf:"pre_processing"`
	// The URL to check.
	Url *string `json:"url" tf:"url"`
	// Validation helps you verify that your HTTP monitor loads the expected content
	// +optional
	Validation *MonitorSpecScriptRequestValidation `json:"validation,omitempty" tf:"validation"`
}

type MonitorSpecScript struct {
	// A HTTP request to be performed by the monitor.
	// +kubebuilder:validation:MinItems=1
	Request []MonitorSpecScriptRequest `json:"request" tf:"request"`
}

type MonitorSpecTagsTag struct {
	// The origin of the tag. Supported values are `AWS`, `AWS_GENERIC`, `AZURE`, `CLOUD_FOUNDRY`, `CONTEXTLESS`, `ENVIRONMENT`, `GOOGLE_CLOUD` and `KUBERNETES`.
	//
	// Custom tags use the `CONTEXTLESS` value.
	Context *string `json:"context" tf:"context"`
	// The key of the tag.
	//
	// Custom tags have the tag value here.
	Key *string `json:"key" tf:"key"`
	// The source of the tag. Supported values are `USER`, `RULE_BASED` and `AUTO`.
	// +optional
	Source *string `json:"source,omitempty" tf:"source"`
	//  The value of the tag.
	//
	// Not applicable to custom tags.
	// +optional
	Value *string `json:"value,omitempty" tf:"value"`
}

type MonitorSpecTags struct {
	// Tag with source of a Dynatrace entity.
	// +optional
	Tag []MonitorSpecTagsTag `json:"tag,omitempty" tf:"tag"`
}

type MonitorSpec struct {
	State *MonitorSpecResource `json:"state,omitempty" tf:"-"`

	Resource MonitorSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type MonitorSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// The anomaly detection configuration.
	// +optional
	AnomalyDetection []MonitorSpecAnomalyDetection `json:"anomalyDetection,omitempty" tf:"anomaly_detection"`
	// The monitor is enabled (`true`) or disabled (`false`).
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
	// The frequency of the monitor, in minutes.
	//
	// You can use one of the following values: `5`, `10`, `15`, `30`, and `60`.
	Frequency *int64 `json:"frequency" tf:"frequency"`
	// A list of locations from which the monitor is executed.
	//
	// To specify a location, use its entity ID.
	// +optional
	// +kubebuilder:validation:MinItems=1
	Locations []string `json:"locations,omitempty" tf:"locations"`
	// A set of manually assigned applications.
	// +optional
	// +kubebuilder:validation:MinItems=1
	ManuallyAssignedApps []string `json:"manuallyAssignedApps,omitempty" tf:"manually_assigned_apps"`
	// The name of the monitor.
	Name *string `json:"name" tf:"name"`
	// The HTTP Script
	// +optional
	Script *MonitorSpecScript `json:"script,omitempty" tf:"script"`
	// A set of tags assigned to the monitor.
	//
	// You can specify only the value of the tag here and the `CONTEXTLESS` context and source 'USER' will be added automatically.
	// +optional
	Tags []MonitorSpecTags `json:"tags,omitempty" tf:"tags"`
}

type MonitorStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// MonitorList is a list of Monitors
type MonitorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Monitor CRD objects
	Items []Monitor `json:"items,omitempty"`
}
