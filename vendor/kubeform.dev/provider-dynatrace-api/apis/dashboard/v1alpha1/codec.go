/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecDashboardMetadata{}).Type1()):               DashboardSpecDashboardMetadataCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecDashboardMetadataDynamicFilters{}).Type1()): DashboardSpecDashboardMetadataDynamicFiltersCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecDashboardMetadataFilter{}).Type1()):         DashboardSpecDashboardMetadataFilterCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecDashboardMetadataSharingDetails{}).Type1()): DashboardSpecDashboardMetadataSharingDetailsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecMetadata{}).Type1()):                        DashboardSpecMetadataCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecTileBounds{}).Type1()):                      DashboardSpecTileBoundsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecTileFilter{}).Type1()):                      DashboardSpecTileFilterCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecTileFilterConfig{}).Type1()):                DashboardSpecTileFilterConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecTileFilterConfigChartConfig{}).Type1()):     DashboardSpecTileFilterConfigChartConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecTileFilterConfigFilters{}).Type1()):         DashboardSpecTileFilterConfigFiltersCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecTileVisualizationConfig{}).Type1()):         DashboardSpecTileVisualizationConfigCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecDashboardMetadata{}).Type1()):               DashboardSpecDashboardMetadataCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecDashboardMetadataDynamicFilters{}).Type1()): DashboardSpecDashboardMetadataDynamicFiltersCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecDashboardMetadataFilter{}).Type1()):         DashboardSpecDashboardMetadataFilterCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecDashboardMetadataSharingDetails{}).Type1()): DashboardSpecDashboardMetadataSharingDetailsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecMetadata{}).Type1()):                        DashboardSpecMetadataCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecTileBounds{}).Type1()):                      DashboardSpecTileBoundsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecTileFilter{}).Type1()):                      DashboardSpecTileFilterCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecTileFilterConfig{}).Type1()):                DashboardSpecTileFilterConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecTileFilterConfigChartConfig{}).Type1()):     DashboardSpecTileFilterConfigChartConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecTileFilterConfigFilters{}).Type1()):         DashboardSpecTileFilterConfigFiltersCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecTileVisualizationConfig{}).Type1()):         DashboardSpecTileVisualizationConfigCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type DashboardSpecDashboardMetadataCodec struct {
}

func (DashboardSpecDashboardMetadataCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecDashboardMetadata)(ptr) == nil
}

func (DashboardSpecDashboardMetadataCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecDashboardMetadata)(ptr)
	var objs []DashboardSpecDashboardMetadata
	if obj != nil {
		objs = []DashboardSpecDashboardMetadata{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecDashboardMetadata{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecDashboardMetadataCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecDashboardMetadata)(ptr) = DashboardSpecDashboardMetadata{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecDashboardMetadata

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecDashboardMetadata{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecDashboardMetadata)(ptr) = objs[0]
			} else {
				*(*DashboardSpecDashboardMetadata)(ptr) = DashboardSpecDashboardMetadata{}
			}
		} else {
			*(*DashboardSpecDashboardMetadata)(ptr) = DashboardSpecDashboardMetadata{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecDashboardMetadata

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecDashboardMetadata{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecDashboardMetadata)(ptr) = obj
		} else {
			*(*DashboardSpecDashboardMetadata)(ptr) = DashboardSpecDashboardMetadata{}
		}
	default:
		iter.ReportError("decode DashboardSpecDashboardMetadata", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecDashboardMetadataDynamicFiltersCodec struct {
}

func (DashboardSpecDashboardMetadataDynamicFiltersCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecDashboardMetadataDynamicFilters)(ptr) == nil
}

func (DashboardSpecDashboardMetadataDynamicFiltersCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecDashboardMetadataDynamicFilters)(ptr)
	var objs []DashboardSpecDashboardMetadataDynamicFilters
	if obj != nil {
		objs = []DashboardSpecDashboardMetadataDynamicFilters{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecDashboardMetadataDynamicFilters{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecDashboardMetadataDynamicFiltersCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecDashboardMetadataDynamicFilters)(ptr) = DashboardSpecDashboardMetadataDynamicFilters{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecDashboardMetadataDynamicFilters

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecDashboardMetadataDynamicFilters{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecDashboardMetadataDynamicFilters)(ptr) = objs[0]
			} else {
				*(*DashboardSpecDashboardMetadataDynamicFilters)(ptr) = DashboardSpecDashboardMetadataDynamicFilters{}
			}
		} else {
			*(*DashboardSpecDashboardMetadataDynamicFilters)(ptr) = DashboardSpecDashboardMetadataDynamicFilters{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecDashboardMetadataDynamicFilters

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecDashboardMetadataDynamicFilters{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecDashboardMetadataDynamicFilters)(ptr) = obj
		} else {
			*(*DashboardSpecDashboardMetadataDynamicFilters)(ptr) = DashboardSpecDashboardMetadataDynamicFilters{}
		}
	default:
		iter.ReportError("decode DashboardSpecDashboardMetadataDynamicFilters", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecDashboardMetadataFilterCodec struct {
}

func (DashboardSpecDashboardMetadataFilterCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecDashboardMetadataFilter)(ptr) == nil
}

func (DashboardSpecDashboardMetadataFilterCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecDashboardMetadataFilter)(ptr)
	var objs []DashboardSpecDashboardMetadataFilter
	if obj != nil {
		objs = []DashboardSpecDashboardMetadataFilter{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecDashboardMetadataFilter{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecDashboardMetadataFilterCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecDashboardMetadataFilter)(ptr) = DashboardSpecDashboardMetadataFilter{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecDashboardMetadataFilter

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecDashboardMetadataFilter{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecDashboardMetadataFilter)(ptr) = objs[0]
			} else {
				*(*DashboardSpecDashboardMetadataFilter)(ptr) = DashboardSpecDashboardMetadataFilter{}
			}
		} else {
			*(*DashboardSpecDashboardMetadataFilter)(ptr) = DashboardSpecDashboardMetadataFilter{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecDashboardMetadataFilter

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecDashboardMetadataFilter{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecDashboardMetadataFilter)(ptr) = obj
		} else {
			*(*DashboardSpecDashboardMetadataFilter)(ptr) = DashboardSpecDashboardMetadataFilter{}
		}
	default:
		iter.ReportError("decode DashboardSpecDashboardMetadataFilter", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecDashboardMetadataSharingDetailsCodec struct {
}

func (DashboardSpecDashboardMetadataSharingDetailsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecDashboardMetadataSharingDetails)(ptr) == nil
}

func (DashboardSpecDashboardMetadataSharingDetailsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecDashboardMetadataSharingDetails)(ptr)
	var objs []DashboardSpecDashboardMetadataSharingDetails
	if obj != nil {
		objs = []DashboardSpecDashboardMetadataSharingDetails{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecDashboardMetadataSharingDetails{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecDashboardMetadataSharingDetailsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecDashboardMetadataSharingDetails)(ptr) = DashboardSpecDashboardMetadataSharingDetails{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecDashboardMetadataSharingDetails

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecDashboardMetadataSharingDetails{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecDashboardMetadataSharingDetails)(ptr) = objs[0]
			} else {
				*(*DashboardSpecDashboardMetadataSharingDetails)(ptr) = DashboardSpecDashboardMetadataSharingDetails{}
			}
		} else {
			*(*DashboardSpecDashboardMetadataSharingDetails)(ptr) = DashboardSpecDashboardMetadataSharingDetails{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecDashboardMetadataSharingDetails

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecDashboardMetadataSharingDetails{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecDashboardMetadataSharingDetails)(ptr) = obj
		} else {
			*(*DashboardSpecDashboardMetadataSharingDetails)(ptr) = DashboardSpecDashboardMetadataSharingDetails{}
		}
	default:
		iter.ReportError("decode DashboardSpecDashboardMetadataSharingDetails", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecMetadataCodec struct {
}

func (DashboardSpecMetadataCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecMetadata)(ptr) == nil
}

func (DashboardSpecMetadataCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecMetadata)(ptr)
	var objs []DashboardSpecMetadata
	if obj != nil {
		objs = []DashboardSpecMetadata{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecMetadata{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecMetadataCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecMetadata)(ptr) = DashboardSpecMetadata{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecMetadata

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecMetadata{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecMetadata)(ptr) = objs[0]
			} else {
				*(*DashboardSpecMetadata)(ptr) = DashboardSpecMetadata{}
			}
		} else {
			*(*DashboardSpecMetadata)(ptr) = DashboardSpecMetadata{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecMetadata

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecMetadata{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecMetadata)(ptr) = obj
		} else {
			*(*DashboardSpecMetadata)(ptr) = DashboardSpecMetadata{}
		}
	default:
		iter.ReportError("decode DashboardSpecMetadata", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecTileBoundsCodec struct {
}

func (DashboardSpecTileBoundsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecTileBounds)(ptr) == nil
}

func (DashboardSpecTileBoundsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecTileBounds)(ptr)
	var objs []DashboardSpecTileBounds
	if obj != nil {
		objs = []DashboardSpecTileBounds{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecTileBounds{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecTileBoundsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecTileBounds)(ptr) = DashboardSpecTileBounds{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecTileBounds

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecTileBounds{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecTileBounds)(ptr) = objs[0]
			} else {
				*(*DashboardSpecTileBounds)(ptr) = DashboardSpecTileBounds{}
			}
		} else {
			*(*DashboardSpecTileBounds)(ptr) = DashboardSpecTileBounds{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecTileBounds

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecTileBounds{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecTileBounds)(ptr) = obj
		} else {
			*(*DashboardSpecTileBounds)(ptr) = DashboardSpecTileBounds{}
		}
	default:
		iter.ReportError("decode DashboardSpecTileBounds", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecTileFilterCodec struct {
}

func (DashboardSpecTileFilterCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecTileFilter)(ptr) == nil
}

func (DashboardSpecTileFilterCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecTileFilter)(ptr)
	var objs []DashboardSpecTileFilter
	if obj != nil {
		objs = []DashboardSpecTileFilter{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecTileFilter{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecTileFilterCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecTileFilter)(ptr) = DashboardSpecTileFilter{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecTileFilter

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecTileFilter{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecTileFilter)(ptr) = objs[0]
			} else {
				*(*DashboardSpecTileFilter)(ptr) = DashboardSpecTileFilter{}
			}
		} else {
			*(*DashboardSpecTileFilter)(ptr) = DashboardSpecTileFilter{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecTileFilter

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecTileFilter{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecTileFilter)(ptr) = obj
		} else {
			*(*DashboardSpecTileFilter)(ptr) = DashboardSpecTileFilter{}
		}
	default:
		iter.ReportError("decode DashboardSpecTileFilter", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecTileFilterConfigCodec struct {
}

func (DashboardSpecTileFilterConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecTileFilterConfig)(ptr) == nil
}

func (DashboardSpecTileFilterConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecTileFilterConfig)(ptr)
	var objs []DashboardSpecTileFilterConfig
	if obj != nil {
		objs = []DashboardSpecTileFilterConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecTileFilterConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecTileFilterConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecTileFilterConfig)(ptr) = DashboardSpecTileFilterConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecTileFilterConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecTileFilterConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecTileFilterConfig)(ptr) = objs[0]
			} else {
				*(*DashboardSpecTileFilterConfig)(ptr) = DashboardSpecTileFilterConfig{}
			}
		} else {
			*(*DashboardSpecTileFilterConfig)(ptr) = DashboardSpecTileFilterConfig{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecTileFilterConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecTileFilterConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecTileFilterConfig)(ptr) = obj
		} else {
			*(*DashboardSpecTileFilterConfig)(ptr) = DashboardSpecTileFilterConfig{}
		}
	default:
		iter.ReportError("decode DashboardSpecTileFilterConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecTileFilterConfigChartConfigCodec struct {
}

func (DashboardSpecTileFilterConfigChartConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecTileFilterConfigChartConfig)(ptr) == nil
}

func (DashboardSpecTileFilterConfigChartConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecTileFilterConfigChartConfig)(ptr)
	var objs []DashboardSpecTileFilterConfigChartConfig
	if obj != nil {
		objs = []DashboardSpecTileFilterConfigChartConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecTileFilterConfigChartConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecTileFilterConfigChartConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecTileFilterConfigChartConfig)(ptr) = DashboardSpecTileFilterConfigChartConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecTileFilterConfigChartConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecTileFilterConfigChartConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecTileFilterConfigChartConfig)(ptr) = objs[0]
			} else {
				*(*DashboardSpecTileFilterConfigChartConfig)(ptr) = DashboardSpecTileFilterConfigChartConfig{}
			}
		} else {
			*(*DashboardSpecTileFilterConfigChartConfig)(ptr) = DashboardSpecTileFilterConfigChartConfig{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecTileFilterConfigChartConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecTileFilterConfigChartConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecTileFilterConfigChartConfig)(ptr) = obj
		} else {
			*(*DashboardSpecTileFilterConfigChartConfig)(ptr) = DashboardSpecTileFilterConfigChartConfig{}
		}
	default:
		iter.ReportError("decode DashboardSpecTileFilterConfigChartConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecTileFilterConfigFiltersCodec struct {
}

func (DashboardSpecTileFilterConfigFiltersCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecTileFilterConfigFilters)(ptr) == nil
}

func (DashboardSpecTileFilterConfigFiltersCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecTileFilterConfigFilters)(ptr)
	var objs []DashboardSpecTileFilterConfigFilters
	if obj != nil {
		objs = []DashboardSpecTileFilterConfigFilters{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecTileFilterConfigFilters{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecTileFilterConfigFiltersCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecTileFilterConfigFilters)(ptr) = DashboardSpecTileFilterConfigFilters{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecTileFilterConfigFilters

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecTileFilterConfigFilters{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecTileFilterConfigFilters)(ptr) = objs[0]
			} else {
				*(*DashboardSpecTileFilterConfigFilters)(ptr) = DashboardSpecTileFilterConfigFilters{}
			}
		} else {
			*(*DashboardSpecTileFilterConfigFilters)(ptr) = DashboardSpecTileFilterConfigFilters{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecTileFilterConfigFilters

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecTileFilterConfigFilters{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecTileFilterConfigFilters)(ptr) = obj
		} else {
			*(*DashboardSpecTileFilterConfigFilters)(ptr) = DashboardSpecTileFilterConfigFilters{}
		}
	default:
		iter.ReportError("decode DashboardSpecTileFilterConfigFilters", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DashboardSpecTileVisualizationConfigCodec struct {
}

func (DashboardSpecTileVisualizationConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DashboardSpecTileVisualizationConfig)(ptr) == nil
}

func (DashboardSpecTileVisualizationConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DashboardSpecTileVisualizationConfig)(ptr)
	var objs []DashboardSpecTileVisualizationConfig
	if obj != nil {
		objs = []DashboardSpecTileVisualizationConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecTileVisualizationConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DashboardSpecTileVisualizationConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DashboardSpecTileVisualizationConfig)(ptr) = DashboardSpecTileVisualizationConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DashboardSpecTileVisualizationConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecTileVisualizationConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DashboardSpecTileVisualizationConfig)(ptr) = objs[0]
			} else {
				*(*DashboardSpecTileVisualizationConfig)(ptr) = DashboardSpecTileVisualizationConfig{}
			}
		} else {
			*(*DashboardSpecTileVisualizationConfig)(ptr) = DashboardSpecTileVisualizationConfig{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DashboardSpecTileVisualizationConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DashboardSpecTileVisualizationConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DashboardSpecTileVisualizationConfig)(ptr) = obj
		} else {
			*(*DashboardSpecTileVisualizationConfig)(ptr) = DashboardSpecTileVisualizationConfig{}
		}
	default:
		iter.ReportError("decode DashboardSpecTileVisualizationConfig", "unexpected JSON type")
	}
}
