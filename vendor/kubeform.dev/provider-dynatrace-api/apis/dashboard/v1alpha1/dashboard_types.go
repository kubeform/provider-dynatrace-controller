/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Dashboard struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DashboardSpec   `json:"spec,omitempty"`
	Status            DashboardStatus `json:"status,omitempty"`
}

type DashboardSpecDashboardMetadataDynamicFilters struct {
	// A set of all possible global dashboard filters that can be applied to a dashboard
	//
	// Currently supported values are:
	//
	// 	OS_TYPE,
	// 	SERVICE_TYPE,
	// 	DEPLOYMENT_TYPE,
	// 	APPLICATION_INJECTION_TYPE,
	// 	PAAS_VENDOR_TYPE,
	// 	DATABASE_VENDOR,
	// 	HOST_VIRTUALIZATION_TYPE,
	// 	HOST_MONITORING_MODE,
	// 	KUBERNETES_CLUSTER,
	// 	RELATED_CLOUD_APPLICATION,
	// 	RELATED_NAMESPACE,
	// 	TAG_KEY:<tagname>
	// +kubebuilder:validation:MinItems=1
	Filters []string `json:"filters" tf:"filters"`
	// A set of entities applied for tag filter suggestions. You can fetch the list of possible values with the [GET all entity types](https://dt-url.net/dw03s7h)request.
	//
	// Only applicable if the **filters** set includes `TAG_KEY:<tagname>`
	// +optional
	// +kubebuilder:validation:MinItems=1
	TagSuggestionTypes []string `json:"tagSuggestionTypes,omitempty" tf:"tag_suggestion_types"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns"`
}

type DashboardSpecDashboardMetadataFilterManagementZone struct {
	// a short description of the Dynatrace entity
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// the ID of the Dynatrace entity
	ID *string `json:"ID" tf:"id"`
	// the name of the Dynatrace entity
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns"`
}

type DashboardSpecDashboardMetadataFilter struct {
	// the management zone this dashboard applies to
	// +optional
	// +kubebuilder:validation:MinItems=1
	ManagementZone []DashboardSpecDashboardMetadataFilterManagementZone `json:"managementZone,omitempty" tf:"management_zone"`
	// the default timeframe of the dashboard
	// +optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns"`
}

type DashboardSpecDashboardMetadataSharingDetails struct {
	// If `true`, the dashboard is shared via link and authenticated users with the link can view
	// +optional
	LinkShared *bool `json:"linkShared,omitempty" tf:"link_shared"`
	// If `true`, the dashboard is published to anyone on this environment
	// +optional
	Published *bool `json:"published,omitempty" tf:"published"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns"`
}

type DashboardSpecDashboardMetadata struct {
	// Dashboard filter configuration of a dashboard
	// +optional
	DynamicFilters *DashboardSpecDashboardMetadataDynamicFilters `json:"dynamicFilters,omitempty" tf:"dynamic_filters"`
	// Global filter Settings for the Dashboard
	// +optional
	Filter *DashboardSpecDashboardMetadataFilter `json:"filter,omitempty" tf:"filter"`
	// the name of the dashboard
	Name *string `json:"name" tf:"name"`
	// the owner of the dashboard
	// +optional
	Owner *string `json:"owner,omitempty" tf:"owner"`
	// the dashboard is shared (`true`) or private (`false`)
	// +optional
	Shared *bool `json:"shared,omitempty" tf:"shared"`
	// represents sharing configuration of a dashboard
	// +optional
	SharingDetails *DashboardSpecDashboardMetadataSharingDetails `json:"sharingDetails,omitempty" tf:"sharing_details"`
	// a set of tags assigned to the dashboard
	// +optional
	Tags []string `json:"tags,omitempty" tf:"tags"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns"`
	// a set of all possible global dashboard filters that can be applied to dashboard
	// +optional
	ValidFilterKeys []string `json:"validFilterKeys,omitempty" tf:"valid_filter_keys"`
}

type DashboardSpecMetadata struct {
	// Dynatrace server version
	// +optional
	ClusterVersion *string `json:"clusterVersion,omitempty" tf:"cluster_version"`
	// A Sorted list of the version numbers of the configuration
	// +optional
	ConfigurationVersions []int64 `json:"configurationVersions,omitempty" tf:"configuration_versions"`
	// A Sorted list of the version numbers of the configuration
	// +optional
	CurrentConfigurationVersions []string `json:"currentConfigurationVersions,omitempty" tf:"current_configuration_versions"`
}

type DashboardSpecTileBounds struct {
	// the height of the tile, in pixels
	Height *int64 `json:"height" tf:"height"`
	// the horizontal distance from the top left corner of the dashboard to the top left corner of the tile, in pixels
	Left *int64 `json:"left" tf:"left"`
	// the vertical distance from the top left corner of the dashboard to the top left corner of the tile, in pixels
	Top *int64 `json:"top" tf:"top"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns"`
	// the width of the tile, in pixels
	Width *int64 `json:"width" tf:"width"`
}

type DashboardSpecTileFilterManagementZone struct {
	// a short description of the Dynatrace entity
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// the ID of the Dynatrace entity
	ID *string `json:"ID" tf:"id"`
	// the name of the Dynatrace entity
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns"`
}

type DashboardSpecTileFilter struct {
	// the management zone this tile applies to
	// +optional
	// +kubebuilder:validation:MinItems=1
	ManagementZone []DashboardSpecTileFilterManagementZone `json:"managementZone,omitempty" tf:"management_zone"`
	// the default timeframe of the tile
	// +optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns"`
}

type DashboardSpecTileFilterConfigChartConfigResultMetadataConfig struct {
	// The color of the metric in the chart, hex format
	// +optional
	CustomColor *string `json:"customColor,omitempty" tf:"custom_color"`
	// A generated key by the Dynatrace Server
	// +optional
	Key *string `json:"key,omitempty" tf:"key"`
	// The timestamp of the last metadata modification, in UTC milliseconds
	// +optional
	LastModified *int64 `json:"lastModified,omitempty" tf:"last_modified"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns"`
}

type DashboardSpecTileFilterConfigChartConfigResultMetadata struct {
	// Additional metadata for charted metric
	// +optional
	// +kubebuilder:validation:MinItems=1
	Config []DashboardSpecTileFilterConfigChartConfigResultMetadataConfig `json:"config,omitempty" tf:"config"`
}

type DashboardSpecTileFilterConfigChartConfigSeriesDimension struct {
	// +optional
	EntityDimension *bool `json:"entityDimension,omitempty" tf:"entity_dimension"`
	// The ID of the dimension by which the metric is split
	ID *string `json:"ID" tf:"id"`
	// The name of the dimension by which the metric is split
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns"`
	// The splitting value
	// +optional
	// +kubebuilder:validation:MinItems=1
	Values []string `json:"values,omitempty" tf:"values"`
}

type DashboardSpecTileFilterConfigChartConfigSeries struct {
	// The charted aggregation of the metric
	Aggregation *string `json:"aggregation" tf:"aggregation"`
	// +optional
	AggregationRate *string `json:"aggregationRate,omitempty" tf:"aggregation_rate"`
	// Configuration of the charted metric splitting
	// +optional
	// +kubebuilder:validation:MinItems=1
	Dimension []DashboardSpecTileFilterConfigChartConfigSeriesDimension `json:"dimension,omitempty" tf:"dimension"`
	// The visualization of the timeseries chart
	EntityType *string `json:"entityType" tf:"entity_type"`
	// The name of the charted metric
	Metric *string `json:"metric" tf:"metric"`
	// The charted percentile. Only applicable if the **aggregation** is set to `PERCENTILE`
	// +optional
	Percentile *int64 `json:"percentile,omitempty" tf:"percentile"`
	// Sort ascending (`true`) or descending (`false`)
	// +optional
	SortAscending *bool `json:"sortAscending,omitempty" tf:"sort_ascending"`
	// Sort the column (`true`) or (`false`)
	// +optional
	SortColumn *bool `json:"sortColumn,omitempty" tf:"sort_column"`
	// The visualization of the timeseries chart. Possible values are `AREA`, `BAR` and `LINE`.
	Type *string `json:"type" tf:"type"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns"`
}

type DashboardSpecTileFilterConfigChartConfig struct {
	// The optional custom y-axis limits
	// +optional
	AxisLimits *map[string]float64 `json:"axisLimits,omitempty" tf:"axis_limits"`
	// Either one of `Bit`, `BitPerHour`, `BitPerMinute`, `BitPerSecond`, `Byte`, `BytePerHour`, `BytePerMinute`, `BytePerSecond`, `Cores`, `Count`, `Day`, `DecibelMilliWatt`, `GibiByte`, `Giga`, `GigaByte`, `Hour`, `KibiByte`, `KibiBytePerHour`, `KibiBytePerMinute`, `KibiBytePerSecond`, `Kilo`, `KiloByte`, `KiloBytePerHour`, `KiloBytePerMinute`, `KiloBytePerSecond`, `MebiByte`, `MebiBytePerHour`, `MebiBytePerMinute`, `MebiBytePerSecond`, `Mega`, `MegaByte`, `MegaBytePerHour`, `MegaBytePerMinute`, `MegaBytePerSecond`, `MicroSecond`, `MilliCores`, `MilliSecond`, `MilliSecondPerMinute`, `Minute`, `Month`, `NanoSecond`, `NanoSecondPerMinute`, `NotApplicable`, `PerHour`, `PerMinute`, `PerSecond`, `Percent`, `Pixel`, `Promille`, `Ratio`, `Second`, `State`, `Unspecified`, `Week`, `Year`
	// +optional
	LeftAxisCustomUnit *string `json:"leftAxisCustomUnit,omitempty" tf:"left_axis_custom_unit"`
	// Defines if a legend should be shown
	// +optional
	Legend *bool `json:"legend,omitempty" tf:"legend"`
	// Additional information about charted metric
	// +optional
	// +kubebuilder:validation:MinItems=1
	ResultMetadata []DashboardSpecTileFilterConfigChartConfigResultMetadata `json:"resultMetadata,omitempty" tf:"result_metadata"`
	// Either one of `Bit`, `BitPerHour`, `BitPerMinute`, `BitPerSecond`, `Byte`, `BytePerHour`, `BytePerMinute`, `BytePerSecond`, `Cores`, `Count`, `Day`, `DecibelMilliWatt`, `GibiByte`, `Giga`, `GigaByte`, `Hour`, `KibiByte`, `KibiBytePerHour`, `KibiBytePerMinute`, `KibiBytePerSecond`, `Kilo`, `KiloByte`, `KiloBytePerHour`, `KiloBytePerMinute`, `KiloBytePerSecond`, `MebiByte`, `MebiBytePerHour`, `MebiBytePerMinute`, `MebiBytePerSecond`, `Mega`, `MegaByte`, `MegaBytePerHour`, `MegaBytePerMinute`, `MegaBytePerSecond`, `MicroSecond`, `MilliCores`, `MilliSecond`, `MilliSecondPerMinute`, `Minute`, `Month`, `NanoSecond`, `NanoSecondPerMinute`, `NotApplicable`, `PerHour`, `PerMinute`, `PerSecond`, `Percent`, `Pixel`, `Promille`, `Ratio`, `Second`, `State`, `Unspecified`, `Week`, `Year`
	// +optional
	RightAxisCustomUnit *string `json:"rightAxisCustomUnit,omitempty" tf:"right_axis_custom_unit"`
	// A list of charted metrics
	// +optional
	// +kubebuilder:validation:MinItems=1
	Series []DashboardSpecTileFilterConfigChartConfigSeries `json:"series,omitempty" tf:"series"`
	// The type of the chart
	Type *string `json:"type" tf:"type"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns"`
}

type DashboardSpecTileFilterConfigFiltersFilterMatch struct {
	// The entity type (e.g. HOST, SERVICE, ...)
	Key *string `json:"key" tf:"key"`
	// the tiles this Dashboard consist of
	// +optional
	// +kubebuilder:validation:MinItems=1
	Values []string `json:"values,omitempty" tf:"values"`
}

type DashboardSpecTileFilterConfigFiltersFilter struct {
	// The entity type (e.g. HOST, SERVICE, ...)
	EntityType *string `json:"entityType" tf:"entity_type"`
	// the tiles this Dashboard consist of
	// +optional
	// +kubebuilder:validation:MinItems=1
	Match []DashboardSpecTileFilterConfigFiltersFilterMatch `json:"match,omitempty" tf:"match"`
}

type DashboardSpecTileFilterConfigFilters struct {
	// the tiles this Dashboard consist of
	// +optional
	// +kubebuilder:validation:MinItems=1
	Filter []DashboardSpecTileFilterConfigFiltersFilter `json:"filter,omitempty" tf:"filter"`
}

type DashboardSpecTileFilterConfig struct {
	// Configuration of a custom chart
	// +optional
	ChartConfig *DashboardSpecTileFilterConfigChartConfig `json:"chartConfig,omitempty" tf:"chart_config"`
	// The name of the tile, set by user
	CustomName *string `json:"customName" tf:"custom_name"`
	// The default name of the tile
	DefaultName *string `json:"defaultName" tf:"default_name"`
	// Configuration of a custom chart
	// +optional
	Filters *DashboardSpecTileFilterConfigFilters `json:"filters,omitempty" tf:"filters"`
	// The type of the filter. Possible values are `ALB`, `APPLICATION`, `APPLICATION_METHOD`, `APPMON`, `ASG`, `AWS_CREDENTIALS`, `AWS_CUSTOM_SERVICE`, `AWS_LAMBDA_FUNCTION`, `CLOUD_APPLICATION`, `CLOUD_APPLICATION_INSTANCE`, `CLOUD_APPLICATION_NAMESPACE`, `CONTAINER_GROUP_INSTANCE`, `CUSTOM_APPLICATION`, `CUSTOM_DEVICES`, `CUSTOM_SERVICES`, `DATABASE`, `DATABASE_KEY_REQUEST`, `DCRUM_APPLICATION`, `DCRUM_ENTITY`, `DYNAMO_DB`, `EBS`, `EC2`, `ELB`, `ENVIRONMENT`, `ESXI`, `EXTERNAL_SYNTHETIC_TEST`, `GLOBAL_BACKGROUND_ACTIVITY`, `HOST`, `IOT`, `KUBERNETES_CLUSTER`, `KUBERNETES_NODE`, `MDA_SERVICE`, `MIXED`, `MOBILE_APPLICATION`, `MONITORED_ENTITY`, `NLB`, `PG_BACKGROUND_ACTIVITY`, `PROBLEM`, `PROCESS_GROUP_INSTANCE`, `RDS`, `REMOTE_PLUGIN`, `SERVICE`, `SERVICE_KEY_REQUEST`, `SYNTHETIC_BROWSER_MONITOR`, `SYNTHETIC_HTTPCHECK`, `SYNTHETIC_HTTPCHECK_STEP`, `SYNTHETIC_LOCATION`, `SYNTHETIC_TEST`, `SYNTHETIC_TEST_STEP`, `UI_ENTITY`, `VIRTUAL_MACHINE`, `WEB_CHECK`.
	Type *string `json:"type" tf:"type"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns"`
}

type DashboardSpecTileVisualizationConfig struct {
	// The axis bucketing when enabled groups similar series in the same virtual axis
	// +optional
	HasAxisBucketing *bool `json:"hasAxisBucketing,omitempty" tf:"has_axis_bucketing"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns"`
}

type DashboardSpecTile struct {
	// The list of Dynatrace entities, assigned to the tile
	// +optional
	// +kubebuilder:validation:MinItems=1
	AssignedEntities []string `json:"assignedEntities,omitempty" tf:"assigned_entities"`
	// the position and size of a tile
	// +optional
	Bounds *DashboardSpecTileBounds `json:"bounds,omitempty" tf:"bounds"`
	// +optional
	ChartVisible *bool `json:"chartVisible,omitempty" tf:"chart_visible"`
	// The tile is configured and ready to use (`true`) or just placed on the dashboard (`false`)
	// +optional
	Configured *bool `json:"configured,omitempty" tf:"configured"`
	// The name of the tile, set by user
	// +optional
	CustomName *string `json:"customName,omitempty" tf:"custom_name"`
	// Include (`false') or exclude (`true`) maintenance windows from availability calculations
	// +optional
	ExcludeMaintenanceWindows *bool `json:"excludeMaintenanceWindows,omitempty" tf:"exclude_maintenance_windows"`
	// is filter applied to a tile. It overrides dashboard's filter
	// +optional
	Filter *DashboardSpecTileFilter `json:"filter,omitempty" tf:"filter"`
	// the position and size of a tile
	// +optional
	FilterConfig *DashboardSpecTileFilterConfig `json:"filterConfig,omitempty" tf:"filter_config"`
	// The limit of the results, if not set will use the default value of the system
	// +optional
	Limit *int64 `json:"limit,omitempty" tf:"limit"`
	// The markdown-formatted content of the tile
	// +optional
	Markdown *string `json:"markdown,omitempty" tf:"markdown"`
	// The metric assigned to the tile
	// +optional
	Metric *string `json:"metric,omitempty" tf:"metric"`
	// the name of the tile
	Name *string `json:"name" tf:"name"`
	// A [user session query](https://www.dynatrace.com/support/help/shortlink/usql-info) executed by the tile
	// +optional
	Query *string `json:"query,omitempty" tf:"query"`
	// the type of the tile. Must be either `APPLICATION_WORLDMAP`, `RESOURCES`, `THIRD_PARTY_MOST_ACTIVE`, `UEM_CONVERSIONS_PER_GOAL`, `PROCESS_GROUPS_ONE` or `HOST` .
	TileType *string `json:"tileType" tf:"tile_type"`
	// The comparison timeframe of the query. If specified, you additionally get the results of the same query with the specified time shift
	// +optional
	TimeFrameShift *string `json:"timeFrameShift,omitempty" tf:"time_frame_shift"`
	// The attribute `type` exists for backwards compatibilty. Usage is discouraged. You should use `visualization` instead.
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns"`
	// The visualization of the tile. Possible values are: `COLUMN_CHART`, `FUNNEL`, `LINE_CHART`, `PIE_CHART`, `SINGLE_VALUE`, `TABLE`
	// +optional
	Visualization *string `json:"visualization,omitempty" tf:"visualization"`
	// Configuration of a User session query visualization tile
	// +optional
	VisualizationConfig *DashboardSpecTileVisualizationConfig `json:"visualizationConfig,omitempty" tf:"visualization_config"`
}

type DashboardSpec struct {
	State *DashboardSpecResource `json:"state,omitempty" tf:"-"`

	Resource DashboardSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type DashboardSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// contains parameters of a dashboard
	// +optional
	DashboardMetadata *DashboardSpecDashboardMetadata `json:"dashboardMetadata,omitempty" tf:"dashboard_metadata"`
	// `metadata` exists for backwards compatibility but shouldn't get specified anymore
	// +optional
	// Deprecated
	Metadata *DashboardSpecMetadata `json:"metadata,omitempty" tf:"metadata"`
	// the tiles this Dashboard consist of
	// +optional
	// +kubebuilder:validation:MinItems=1
	Tile []DashboardSpecTile `json:"tile,omitempty" tf:"tile"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns"`
}

type DashboardStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// DashboardList is a list of Dashboards
type DashboardList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Dashboard CRD objects
	Items []Dashboard `json:"items,omitempty"`
}
