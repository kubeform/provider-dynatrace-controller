/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Notification struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NotificationSpec   `json:"spec,omitempty"`
	Status            NotificationStatus `json:"status,omitempty"`
}

type NotificationSpecAnsibleTower struct {
	// Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
	AcceptAnyCertificate *bool `json:"acceptAnyCertificate" tf:"accept_any_certificate"`
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `json:"active" tf:"active"`
	// The ID of the associated alerting profile
	AlertingProfile *string `json:"alertingProfile" tf:"alerting_profile"`
	// The custom message of the notification.   This message will be displayed in the extra variables **Message** field of your job template.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	CustomMessage *string `json:"customMessage" tf:"custom_message"`
	// The ID of the target Ansible Tower job template
	JobTemplateID *int64 `json:"jobTemplateID" tf:"job_template_id"`
	// The URL of the target Ansible Tower job template
	JobTemplateURL *string `json:"jobTemplateURL" tf:"job_template_url"`
	// The name of the notification configuration
	Name *string `json:"name" tf:"name"`
	// The password for the Ansible Tower account
	// +optional
	Password *string `json:"password,omitempty" tf:"password"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns"`
	// The username of the Ansible Tower account
	Username *string `json:"username" tf:"username"`
}

type NotificationSpecConfig struct {
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `json:"active" tf:"active"`
	// The ID of the associated alerting profile
	AlertingProfile *string `json:"alertingProfile" tf:"alerting_profile"`
	// The name of the notification configuration
	Name *string `json:"name" tf:"name"`
	// Defines the actual set of fields depending on the value. See one of the following objects:  * `EMAIL` -> EmailNotificationConfig  * `PAGER_DUTY` -> PagerDutyNotificationConfig  * `WEBHOOK` -> WebHookNotificationConfig  * `SLACK` -> SlackNotificationConfig  * `HIPCHAT` -> HipChatNotificationConfig  * `VICTOROPS` -> VictorOpsNotificationConfig  * `SERVICE_NOW` -> ServiceNowNotificationConfig  * `XMATTERS` -> XMattersNotificationConfig  * `ANSIBLETOWER` -> AnsibleTowerNotificationConfig  * `OPS_GENIE` -> OpsGenieNotificationConfig  * `JIRA` -> JiraNotificationConfig  * `TRELLO` -> TrelloNotificationConfig
	Type *string `json:"type" tf:"type"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns"`
}

type NotificationSpecEmail struct {
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `json:"active" tf:"active"`
	// The ID of the associated alerting profile
	AlertingProfile *string `json:"alertingProfile" tf:"alerting_profile"`
	// The list of the email BCC-recipients
	// +optional
	// +kubebuilder:validation:MinItems=1
	BccReceivers []string `json:"bccReceivers,omitempty" tf:"bcc_receivers"`
	// The template of the email notification.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	Body *string `json:"body" tf:"body"`
	// The list of the email CC-recipients
	// +optional
	// +kubebuilder:validation:MinItems=1
	CcReceivers []string `json:"ccReceivers,omitempty" tf:"cc_receivers"`
	// The name of the notification configuration
	Name *string `json:"name" tf:"name"`
	// The list of the email recipients
	// +optional
	// +kubebuilder:validation:MinItems=1
	Receivers []string `json:"receivers,omitempty" tf:"receivers"`
	// The subject of the email notifications
	Subject *string `json:"subject" tf:"subject"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns"`
}

type NotificationSpecHipchat struct {
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `json:"active" tf:"active"`
	// The ID of the associated alerting profile
	AlertingProfile *string `json:"alertingProfile" tf:"alerting_profile"`
	// The content of the notification message.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	Message *string `json:"message" tf:"message"`
	// The name of the notification configuration
	Name *string `json:"name" tf:"name"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns"`
	// The URL of the HipChat WebHook.  This is confidential information, therefore GET requests return this field with the `null` value, and it is optional for PUT requests
	// +optional
	Url *string `json:"url,omitempty" tf:"url"`
}

type NotificationSpecJira struct {
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `json:"active" tf:"active"`
	// The ID of the associated alerting profile
	AlertingProfile *string `json:"alertingProfile" tf:"alerting_profile"`
	// The description of the Jira issue to be created by this notification.   You can use same placeholders as in issue summary
	Description *string `json:"description" tf:"description"`
	// The type of the Jira issue to be created by this notification
	IssueType *string `json:"issueType" tf:"issue_type"`
	// The name of the notification configuration
	Name *string `json:"name" tf:"name"`
	// The password for the Jira profile
	// +optional
	Password *string `json:"password,omitempty" tf:"password"`
	// The project key of the Jira issue to be created by this notification
	ProjectKey *string `json:"projectKey" tf:"project_key"`
	// The summary of the Jira issue to be created by this notification.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	Summary *string `json:"summary" tf:"summary"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns"`
	// The URL of the Jira API endpoint
	Url *string `json:"url" tf:"url"`
	// The username of the Jira profile
	Username *string `json:"username" tf:"username"`
}

type NotificationSpecOpsGenie struct {
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `json:"active" tf:"active"`
	// The ID of the associated alerting profile
	AlertingProfile *string `json:"alertingProfile" tf:"alerting_profile"`
	// The API key to access OpsGenie
	// +optional
	ApiKey *string `json:"apiKey,omitempty" tf:"api_key"`
	// The region domain of the OpsGenie
	Domain *string `json:"domain" tf:"domain"`
	// The content of the message.  You can use the following placeholders:  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem
	Message *string `json:"message" tf:"message"`
	// The name of the notification configuration
	Name *string `json:"name" tf:"name"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns"`
}

type NotificationSpecPagerDuty struct {
	// The name of the PagerDuty account
	Account *string `json:"account" tf:"account"`
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `json:"active" tf:"active"`
	// The ID of the associated alerting profile
	AlertingProfile *string `json:"alertingProfile" tf:"alerting_profile"`
	// The name of the notification configuration
	Name *string `json:"name" tf:"name"`
	// The API key to access PagerDuty
	// +optional
	ServiceAPIKey *string `json:"serviceAPIKey,omitempty" tf:"service_api_key"`
	// The name of the service
	ServiceName *string `json:"serviceName" tf:"service_name"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns"`
}

type NotificationSpecServiceNow struct {
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `json:"active" tf:"active"`
	// The ID of the associated alerting profile
	AlertingProfile *string `json:"alertingProfile" tf:"alerting_profile"`
	// The ServiceNow instance identifier. It refers to the first part of your own ServiceNow URL.   This field is mutually exclusive with the **url** field. You can only use one of them
	// +optional
	InstanceName *string `json:"instanceName,omitempty" tf:"instance_name"`
	// The content of the ServiceNow description.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	Message *string `json:"message" tf:"message"`
	// The name of the notification configuration
	Name *string `json:"name" tf:"name"`
	// The username to the ServiceNow account
	// +optional
	Password *string `json:"password,omitempty" tf:"password"`
	// Send events into ServiceNow ITOM (`true`)
	SendEvents *bool `json:"sendEvents" tf:"send_events"`
	// Send incidents into ServiceNow ITSM (`true`)
	SendIncidents *bool `json:"sendIncidents" tf:"send_incidents"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns"`
	// The URL of the on-premise ServiceNow installation.   This field is mutually exclusive with the **instanceName** field. You can only use one of them
	// +optional
	Url *string `json:"url,omitempty" tf:"url"`
	// The username of the ServiceNow account.   Make sure that your user account has the `rest_service`, `web_request_admin`, and `x_dynat_ruxit.Integration` roles
	Username *string `json:"username" tf:"username"`
}

type NotificationSpecSlack struct {
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `json:"active" tf:"active"`
	// The ID of the associated alerting profile
	AlertingProfile *string `json:"alertingProfile" tf:"alerting_profile"`
	// The channel (for example, `#general`) or the user (for example, `@john.smith`) to send the message to
	Channel *string `json:"channel" tf:"channel"`
	// The name of the notification configuration
	Name *string `json:"name" tf:"name"`
	// The content of the message.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	Title *string `json:"title" tf:"title"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns"`
	// The URL of the Slack WebHook.  This is confidential information, therefore GET requests return this field with the `null` value, and it is optional for PUT requests
	// +optional
	Url *string `json:"url,omitempty" tf:"url"`
}

type NotificationSpecTrello struct {
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `json:"active" tf:"active"`
	// The ID of the associated alerting profile
	AlertingProfile *string `json:"alertingProfile" tf:"alerting_profile"`
	// The application key for the Trello account
	ApplicationKey *string `json:"applicationKey" tf:"application_key"`
	// The application token for the Trello account
	// +optional
	AuthorizationToken *string `json:"authorizationToken,omitempty" tf:"authorization_token"`
	// The Trello board to which the card should be assigned
	BoardID *string `json:"boardID" tf:"board_id"`
	// The description of the Trello card.   You can use same placeholders as in card text
	Description *string `json:"description" tf:"description"`
	// The Trello list to which the card should be assigned
	ListID *string `json:"listID" tf:"list_id"`
	// The name of the notification configuration
	Name *string `json:"name" tf:"name"`
	// The Trello list to which the card of the resolved problem should be assigned
	ResolvedListID *string `json:"resolvedListID" tf:"resolved_list_id"`
	// The text of the generated Trello card.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	Text *string `json:"text" tf:"text"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns"`
}

type NotificationSpecVictorOps struct {
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `json:"active" tf:"active"`
	// The ID of the associated alerting profile
	AlertingProfile *string `json:"alertingProfile" tf:"alerting_profile"`
	// The API key for the target VictorOps account
	// +optional
	ApiKey *string `json:"apiKey,omitempty" tf:"api_key"`
	// The content of the message.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`
	Message *string `json:"message" tf:"message"`
	// The name of the notification configuration
	Name *string `json:"name" tf:"name"`
	// The routing key, defining the group to be notified
	RoutingKey *string `json:"routingKey" tf:"routing_key"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns"`
}

type NotificationSpecWebHookHeader struct {
	// The name of the HTTP header
	Name *string `json:"name" tf:"name"`
	// The value of the HTTP header. May contain an empty value.   Required when creating a new notification.  For the **Authorization** header, GET requests return the `null` value.  If you want update a notification configuration with an **Authorization** header which you want to remain intact, set the **Authorization** header with the `null` value
	// +optional
	Value *string `json:"value,omitempty" tf:"value"`
}

type NotificationSpecWebHook struct {
	// Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
	AcceptAnyCertificate *bool `json:"acceptAnyCertificate" tf:"accept_any_certificate"`
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `json:"active" tf:"active"`
	// The ID of the associated alerting profile
	AlertingProfile *string `json:"alertingProfile" tf:"alerting_profile"`
	// A list of the additional HTTP headers
	// +optional
	Header []NotificationSpecWebHookHeader `json:"header,omitempty" tf:"header"`
	// The name of the notification configuration
	Name *string `json:"name" tf:"name"`
	// Call webhook if new events merge into existing problems
	// +optional
	NotifyEventMerges *bool `json:"notifyEventMerges,omitempty" tf:"notify_event_merges"`
	// The content of the notification message.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	Payload *string `json:"payload" tf:"payload"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns"`
	// The URL of the WebHook endpoint
	Url *string `json:"url" tf:"url"`
}

type NotificationSpecXmattersHeader struct {
	// The name of the HTTP header
	Name *string `json:"name" tf:"name"`
	// The value of the HTTP header. May contain an empty value.   Required when creating a new notification.  For the **Authorization** header, GET requests return the `null` value.  If you want update a notification configuration with an **Authorization** header which you want to remain intact, set the **Authorization** header with the `null` value
	// +optional
	Value *string `json:"value,omitempty" tf:"value"`
}

type NotificationSpecXmatters struct {
	// Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
	AcceptAnyCertificate *bool `json:"acceptAnyCertificate" tf:"accept_any_certificate"`
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `json:"active" tf:"active"`
	// The ID of the associated alerting profile
	AlertingProfile *string `json:"alertingProfile" tf:"alerting_profile"`
	// A list of the additional HTTP headers
	// +optional
	Header []NotificationSpecXmattersHeader `json:"header,omitempty" tf:"header"`
	// The name of the notification configuration
	Name *string `json:"name" tf:"name"`
	// The content of the notification message.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	Payload *string `json:"payload" tf:"payload"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns"`
	// The URL of the xMatters WebHook
	Url *string `json:"url" tf:"url"`
}

type NotificationSpec struct {
	State *NotificationSpecResource `json:"state,omitempty" tf:"-"`

	Resource NotificationSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type NotificationSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Configuration for Ansible Tower Notification
	// +optional
	AnsibleTower *NotificationSpecAnsibleTower `json:"ansibleTower,omitempty" tf:"ansible_tower"`
	// Configuration for Generic Notification
	// +optional
	Config *NotificationSpecConfig `json:"config,omitempty" tf:"config"`
	// Configuration for Email Notification
	// +optional
	Email *NotificationSpecEmail `json:"email,omitempty" tf:"email"`
	// Configuration for HipChat Notification
	// +optional
	Hipchat *NotificationSpecHipchat `json:"hipchat,omitempty" tf:"hipchat"`
	// Configuration for Jira Notification
	// +optional
	Jira *NotificationSpecJira `json:"jira,omitempty" tf:"jira"`
	// Configuration for OpsGenie Notification
	// +optional
	OpsGenie *NotificationSpecOpsGenie `json:"opsGenie,omitempty" tf:"ops_genie"`
	// Configuration for PagerDuty Notification
	// +optional
	PagerDuty *NotificationSpecPagerDuty `json:"pagerDuty,omitempty" tf:"pager_duty"`
	// Configuration for ServiceNow Notification
	// +optional
	ServiceNow *NotificationSpecServiceNow `json:"serviceNow,omitempty" tf:"service_now"`
	// Configuration for Slack Notification
	// +optional
	Slack *NotificationSpecSlack `json:"slack,omitempty" tf:"slack"`
	// Configuration for Trello Notification
	// +optional
	Trello *NotificationSpecTrello `json:"trello,omitempty" tf:"trello"`
	// Configuration for VictorOps Notification
	// +optional
	VictorOps *NotificationSpecVictorOps `json:"victorOps,omitempty" tf:"victor_ops"`
	// Configuration for WebHook Notification
	// +optional
	WebHook *NotificationSpecWebHook `json:"webHook,omitempty" tf:"web_hook"`
	// Configuration for XMatters Notification
	// +optional
	Xmatters *NotificationSpecXmatters `json:"xmatters,omitempty" tf:"xmatters"`
}

type NotificationStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// NotificationList is a list of Notifications
type NotificationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Notification CRD objects
	Items []Notification `json:"items,omitempty"`
}
