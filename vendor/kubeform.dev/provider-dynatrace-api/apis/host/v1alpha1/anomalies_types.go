/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Anomalies struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AnomaliesSpec   `json:"spec,omitempty"`
	Status            AnomaliesStatus `json:"status,omitempty"`
}

type AnomaliesSpecConnections struct {
	// The detection is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled" tf:"enabled"`
	// Alert (`true`) on graceful host shutdowns
	EnabledOnGracefulShutdowns *bool `json:"enabledOnGracefulShutdowns" tf:"enabled_on_graceful_shutdowns"`
}

type AnomaliesSpecCpuThresholds struct {
	// Alert if CPU usage is higher than *X*% in 3 out of 5 samples
	Saturation *int64 `json:"saturation" tf:"saturation"`
}

type AnomaliesSpecCpu struct {
	// The detection is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled" tf:"enabled"`
	// Custom thresholds for high CPU saturation. If not set then the automatic mode is used
	// +optional
	Thresholds *AnomaliesSpecCpuThresholds `json:"thresholds,omitempty" tf:"thresholds"`
}

type AnomaliesSpecDisksInodesThresholds struct {
	// Alert if percentage of available inodes is lower than *X*% in 3 out of 5 samples
	Percentage *int64 `json:"percentage" tf:"percentage"`
}

type AnomaliesSpecDisksInodes struct {
	// The detection is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled" tf:"enabled"`
	// Custom thresholds for low disk inodes number. If not set, automatic mode is used
	// +optional
	Thresholds *AnomaliesSpecDisksInodesThresholds `json:"thresholds,omitempty" tf:"thresholds"`
}

type AnomaliesSpecDisksSpaceThresholds struct {
	// Alert if free disk space is lower than *X*% in 3 out of 5 samples
	Percentage *int64 `json:"percentage" tf:"percentage"`
}

type AnomaliesSpecDisksSpace struct {
	// The detection is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled" tf:"enabled"`
	// Custom thresholds for low disk space. If not set, automatic mode is used
	// +optional
	Thresholds *AnomaliesSpecDisksSpaceThresholds `json:"thresholds,omitempty" tf:"thresholds"`
}

type AnomaliesSpecDisksSpeedThresholds struct {
	// Alert if disk read/write time is higher than *X* milliseconds in 3 out of 5 samples
	WriteAndReadTime *int64 `json:"writeAndReadTime" tf:"write_and_read_time"`
}

type AnomaliesSpecDisksSpeed struct {
	// The detection is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled" tf:"enabled"`
	// Custom thresholds for slow running disks. If not set, the automatic mode is used
	// +optional
	Thresholds *AnomaliesSpecDisksSpeedThresholds `json:"thresholds,omitempty" tf:"thresholds"`
}

type AnomaliesSpecDisks struct {
	// Configuration of low disk inodes number detection
	// +optional
	Inodes *AnomaliesSpecDisksInodes `json:"inodes,omitempty" tf:"inodes"`
	// Configuration of low disk space detection
	// +optional
	Space *AnomaliesSpecDisksSpace `json:"space,omitempty" tf:"space"`
	// Configuration of slow running disks detection
	// +optional
	Speed *AnomaliesSpecDisksSpeed `json:"speed,omitempty" tf:"speed"`
}

type AnomaliesSpecGcThresholds struct {
	// GC suspension is higher than *X*% in 3 out of 5 samples
	SuspensionPercentage *int64 `json:"suspensionPercentage" tf:"suspension_percentage"`
	// GC time is higher than *X*% in 3 out of 5 samples
	TimePercentage *int64 `json:"timePercentage" tf:"time_percentage"`
}

type AnomaliesSpecGc struct {
	// The detection is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled" tf:"enabled"`
	// Custom thresholds for high GC activity. If not set, automatic mode is used.   Meeting **any** of these conditions triggers an alert
	// +optional
	Thresholds *AnomaliesSpecGcThresholds `json:"thresholds,omitempty" tf:"thresholds"`
}

type AnomaliesSpecJavaOutOfMemoryThresholds struct {
	// Alert if the number of Java out of memory exceptions is *X* per minute or higher
	ExceptionCount *int64 `json:"exceptionCount" tf:"exception_count"`
}

type AnomaliesSpecJavaOutOfMemory struct {
	// The detection is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled" tf:"enabled"`
	// Custom thresholds for Java out of memory. If not set, automatic mode is used
	// +optional
	Thresholds *AnomaliesSpecJavaOutOfMemoryThresholds `json:"thresholds,omitempty" tf:"thresholds"`
}

type AnomaliesSpecJavaOutOfThreadsThresholds struct {
	// Alert if the number of Java out of threads exceptions is *X* per minute or higher
	ExceptionCount *int64 `json:"exceptionCount" tf:"exception_count"`
}

type AnomaliesSpecJavaOutOfThreads struct {
	// The detection is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled" tf:"enabled"`
	// Custom thresholds for Java out of threads detection. If not set, automatic mode is used
	// +optional
	Thresholds *AnomaliesSpecJavaOutOfThreadsThresholds `json:"thresholds,omitempty" tf:"thresholds"`
}

type AnomaliesSpecJava struct {
	// Configuration of Java out of memory problems detection
	// +optional
	OutOfMemory *AnomaliesSpecJavaOutOfMemory `json:"outOfMemory,omitempty" tf:"out_of_memory"`
	// Configuration of Java out of threads problems detection
	// +optional
	OutOfThreads *AnomaliesSpecJavaOutOfThreads `json:"outOfThreads,omitempty" tf:"out_of_threads"`
}

type AnomaliesSpecMemoryThresholdsLinux struct {
	// Memory page fault rate is higher than *X* faults per second
	PageFaults *int64 `json:"pageFaults" tf:"page_faults"`
	// Memory usage is higher than *X*%
	Usage *int64 `json:"usage" tf:"usage"`
}

type AnomaliesSpecMemoryThresholdsWindows struct {
	// Memory page fault rate is higher than *X* faults per second
	PageFaults *int64 `json:"pageFaults" tf:"page_faults"`
	// Memory usage is higher than *X*%
	Usage *int64 `json:"usage" tf:"usage"`
}

type AnomaliesSpecMemoryThresholds struct {
	// Custom thresholds for Linux
	Linux *AnomaliesSpecMemoryThresholdsLinux `json:"linux" tf:"linux"`
	// Custom thresholds for Windows
	Windows *AnomaliesSpecMemoryThresholdsWindows `json:"windows" tf:"windows"`
}

type AnomaliesSpecMemory struct {
	// The detection is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled" tf:"enabled"`
	// Custom thresholds for high memory usage. If not set then the automatic mode is used. **Both** conditions must be met to trigger an alert
	// +optional
	Thresholds *AnomaliesSpecMemoryThresholds `json:"thresholds,omitempty" tf:"thresholds"`
}

type AnomaliesSpecNetworkConnectivityThresholds struct {
	// Number of failed connections is higher than *X* connections per minute in 3 out of 5 samples
	FailedConnections *int64 `json:"failedConnections" tf:"failed_connections"`
	// Percentage of new connection failures is higher than *X*% in 3 out of 5 samples
	NewConnectionFailures *int64 `json:"newConnectionFailures" tf:"new_connection_failures"`
}

type AnomaliesSpecNetworkConnectivity struct {
	// The detection is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled" tf:"enabled"`
	// Custom thresholds for TCP connection problems. If not set, automatic mode is used.   **All** of these conditions must be met to trigger an alert
	// +optional
	Thresholds *AnomaliesSpecNetworkConnectivityThresholds `json:"thresholds,omitempty" tf:"thresholds"`
}

type AnomaliesSpecNetworkDroppedPacketsThresholds struct {
	// Receive/transmit dropped packet percentage is higher than *X*% in 3 out of 5 samples
	DroppedPackets *int64 `json:"droppedPackets" tf:"dropped_packets"`
	// Total receive/transmit packets rate is higher than *X* packets per second in 3 out of 5 samples
	TotalPacketsRate *int64 `json:"totalPacketsRate" tf:"total_packets_rate"`
}

type AnomaliesSpecNetworkDroppedPackets struct {
	// The detection is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled" tf:"enabled"`
	// Custom thresholds for dropped packets. If not set, automatic mode is used.   **All** of these conditions must be met to trigger an alert
	// +optional
	Thresholds *AnomaliesSpecNetworkDroppedPacketsThresholds `json:"thresholds,omitempty" tf:"thresholds"`
}

type AnomaliesSpecNetworkErrorsThresholds struct {
	// Receive/transmit error packet percentage is higher than *X*% in 3 out of 5 samples
	ErrorsPercentage *int64 `json:"errorsPercentage" tf:"errors_percentage"`
	// Total receive/transmit packets rate is higher than *X* packets per second in 3 out of 5 samples
	TotalPacketsRate *int64 `json:"totalPacketsRate" tf:"total_packets_rate"`
}

type AnomaliesSpecNetworkErrors struct {
	// The detection is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled" tf:"enabled"`
	// Custom thresholds for network errors. If not set, automatic mode is used.   **All** of these conditions must be met to trigger an alert
	// +optional
	Thresholds *AnomaliesSpecNetworkErrorsThresholds `json:"thresholds,omitempty" tf:"thresholds"`
}

type AnomaliesSpecNetworkRetransmissionThresholds struct {
	// Retransmission rate is higher than *X*% in 3 out of 5 samples
	RetransmissionRate *int64 `json:"retransmissionRate" tf:"retransmission_rate"`
	// Number of retransmitted packets is higher than *X* packets per minute in 3 out of 5 samples
	RetransmittedPackets *int64 `json:"retransmittedPackets" tf:"retransmitted_packets"`
}

type AnomaliesSpecNetworkRetransmission struct {
	// The detection is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled" tf:"enabled"`
	// Custom thresholds for high retransmission rate. If not set, automatic mode is used.   **All** of these conditions must be met to trigger an alert
	// +optional
	Thresholds *AnomaliesSpecNetworkRetransmissionThresholds `json:"thresholds,omitempty" tf:"thresholds"`
}

type AnomaliesSpecNetworkUtilizationThresholds struct {
	// Alert if sent/received traffic utilization is higher than *X*% in 3 out of 5 samples
	Utilization *int64 `json:"utilization" tf:"utilization"`
}

type AnomaliesSpecNetworkUtilization struct {
	// The detection is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled" tf:"enabled"`
	// Custom thresholds for high network utilization. If not set, automatic mode is used
	// +optional
	Thresholds *AnomaliesSpecNetworkUtilizationThresholds `json:"thresholds,omitempty" tf:"thresholds"`
}

type AnomaliesSpecNetwork struct {
	// Configuration of TCP connectivity problems detection
	// +optional
	Connectivity *AnomaliesSpecNetworkConnectivity `json:"connectivity,omitempty" tf:"connectivity"`
	// Configuration of high number of dropped packets detection
	// +optional
	DroppedPackets *AnomaliesSpecNetworkDroppedPackets `json:"droppedPackets,omitempty" tf:"dropped_packets"`
	// Configuration of high number of network errors detection
	// +optional
	Errors *AnomaliesSpecNetworkErrors `json:"errors,omitempty" tf:"errors"`
	// Configuration of high retransmission rate detection
	// +optional
	Retransmission *AnomaliesSpecNetworkRetransmission `json:"retransmission,omitempty" tf:"retransmission"`
	// Configuration of high network utilization detection
	// +optional
	Utilization *AnomaliesSpecNetworkUtilization `json:"utilization,omitempty" tf:"utilization"`
}

type AnomaliesSpec struct {
	State *AnomaliesSpecResource `json:"state,omitempty" tf:"-"`

	Resource AnomaliesSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type AnomaliesSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Configuration of lost connection detection
	// +optional
	Connections *AnomaliesSpecConnections `json:"connections,omitempty" tf:"connections"`
	// Configuration of high CPU saturation detection
	// +optional
	Cpu *AnomaliesSpecCpu `json:"cpu,omitempty" tf:"cpu"`
	// Configuration of disk related anomalies
	// +optional
	Disks *AnomaliesSpecDisks `json:"disks,omitempty" tf:"disks"`
	// Configuration of high Garbage Collector activity detection
	// +optional
	Gc *AnomaliesSpecGc `json:"gc,omitempty" tf:"gc"`
	// Configuration of Java related anomalies
	// +optional
	Java *AnomaliesSpecJava `json:"java,omitempty" tf:"java"`
	// Configuration of high memory usage detection
	// +optional
	Memory *AnomaliesSpecMemory `json:"memory,omitempty" tf:"memory"`
	// Configuration of network related anomalies
	// +optional
	Network *AnomaliesSpecNetwork `json:"network,omitempty" tf:"network"`
}

type AnomaliesStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// AnomaliesList is a list of Anomaliess
type AnomaliesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Anomalies CRD objects
	Items []Anomalies `json:"items,omitempty"`
}
