/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparison{}).Type1()):                                             ServiceMetricSpecConditionsConditionComparisonCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonBoolean{}).Type1()):                                      ServiceMetricSpecConditionsConditionComparisonBooleanCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonEsbInputNodeType{}).Type1()):                             ServiceMetricSpecConditionsConditionComparisonEsbInputNodeTypeCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonFailedState{}).Type1()):                                  ServiceMetricSpecConditionsConditionComparisonFailedStateCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonFailureReason{}).Type1()):                                ServiceMetricSpecConditionsConditionComparisonFailureReasonCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonFastString{}).Type1()):                                   ServiceMetricSpecConditionsConditionComparisonFastStringCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonFlawState{}).Type1()):                                    ServiceMetricSpecConditionsConditionComparisonFlawStateCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonGeneric{}).Type1()):                                      ServiceMetricSpecConditionsConditionComparisonGenericCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonHttpMethod{}).Type1()):                                   ServiceMetricSpecConditionsConditionComparisonHttpMethodCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonHttpStatusClass{}).Type1()):                              ServiceMetricSpecConditionsConditionComparisonHttpStatusClassCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonIibInputNodeType{}).Type1()):                             ServiceMetricSpecConditionsConditionComparisonIibInputNodeTypeCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonNumber{}).Type1()):                                       ServiceMetricSpecConditionsConditionComparisonNumberCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonNumberRequestAttribute{}).Type1()):                       ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSource{}).Type1()):                 ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTag{}).Type1()):       ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTagCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTagTagKey{}).Type1()): ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTagTagKeyCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonServiceType{}).Type1()):                                  ServiceMetricSpecConditionsConditionComparisonServiceTypeCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonString{}).Type1()):                                       ServiceMetricSpecConditionsConditionComparisonStringCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonStringRequestAttribute{}).Type1()):                       ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSource{}).Type1()):                 ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTag{}).Type1()):       ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTagCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTagTagKey{}).Type1()): ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTagTagKeyCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonTag{}).Type1()):                                          ServiceMetricSpecConditionsConditionComparisonTagCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonTagValue{}).Type1()):                                     ServiceMetricSpecConditionsConditionComparisonTagValueCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonTagValues{}).Type1()):                                    ServiceMetricSpecConditionsConditionComparisonTagValuesCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonZosCallType{}).Type1()):                                  ServiceMetricSpecConditionsConditionComparisonZosCallTypeCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecDimensionDefinition{}).Type1()):                                                       ServiceMetricSpecDimensionDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecDimensionDefinitionPlaceholders{}).Type1()):                                           ServiceMetricSpecDimensionDefinitionPlaceholdersCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSource{}).Type1()):                          ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTag{}).Type1()):                ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagTagKey{}).Type1()):          ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagTagKeyCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecMetricDefinition{}).Type1()):                                                          ServiceMetricSpecMetricDefinitionCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparison{}).Type1()):                                             ServiceMetricSpecConditionsConditionComparisonCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonBoolean{}).Type1()):                                      ServiceMetricSpecConditionsConditionComparisonBooleanCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonEsbInputNodeType{}).Type1()):                             ServiceMetricSpecConditionsConditionComparisonEsbInputNodeTypeCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonFailedState{}).Type1()):                                  ServiceMetricSpecConditionsConditionComparisonFailedStateCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonFailureReason{}).Type1()):                                ServiceMetricSpecConditionsConditionComparisonFailureReasonCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonFastString{}).Type1()):                                   ServiceMetricSpecConditionsConditionComparisonFastStringCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonFlawState{}).Type1()):                                    ServiceMetricSpecConditionsConditionComparisonFlawStateCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonGeneric{}).Type1()):                                      ServiceMetricSpecConditionsConditionComparisonGenericCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonHttpMethod{}).Type1()):                                   ServiceMetricSpecConditionsConditionComparisonHttpMethodCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonHttpStatusClass{}).Type1()):                              ServiceMetricSpecConditionsConditionComparisonHttpStatusClassCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonIibInputNodeType{}).Type1()):                             ServiceMetricSpecConditionsConditionComparisonIibInputNodeTypeCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonNumber{}).Type1()):                                       ServiceMetricSpecConditionsConditionComparisonNumberCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonNumberRequestAttribute{}).Type1()):                       ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSource{}).Type1()):                 ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTag{}).Type1()):       ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTagCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTagTagKey{}).Type1()): ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTagTagKeyCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonServiceType{}).Type1()):                                  ServiceMetricSpecConditionsConditionComparisonServiceTypeCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonString{}).Type1()):                                       ServiceMetricSpecConditionsConditionComparisonStringCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonStringRequestAttribute{}).Type1()):                       ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSource{}).Type1()):                 ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTag{}).Type1()):       ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTagCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTagTagKey{}).Type1()): ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTagTagKeyCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonTag{}).Type1()):                                          ServiceMetricSpecConditionsConditionComparisonTagCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonTagValue{}).Type1()):                                     ServiceMetricSpecConditionsConditionComparisonTagValueCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonTagValues{}).Type1()):                                    ServiceMetricSpecConditionsConditionComparisonTagValuesCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonZosCallType{}).Type1()):                                  ServiceMetricSpecConditionsConditionComparisonZosCallTypeCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecDimensionDefinition{}).Type1()):                                                       ServiceMetricSpecDimensionDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecDimensionDefinitionPlaceholders{}).Type1()):                                           ServiceMetricSpecDimensionDefinitionPlaceholdersCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSource{}).Type1()):                          ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTag{}).Type1()):                ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagTagKey{}).Type1()):          ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagTagKeyCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecMetricDefinition{}).Type1()):                                                          ServiceMetricSpecMetricDefinitionCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type ServiceMetricSpecConditionsConditionComparisonCodec struct {
}

func (ServiceMetricSpecConditionsConditionComparisonCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceMetricSpecConditionsConditionComparison)(ptr) == nil
}

func (ServiceMetricSpecConditionsConditionComparisonCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceMetricSpecConditionsConditionComparison)(ptr)
	var objs []ServiceMetricSpecConditionsConditionComparison
	if obj != nil {
		objs = []ServiceMetricSpecConditionsConditionComparison{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparison{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceMetricSpecConditionsConditionComparisonCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceMetricSpecConditionsConditionComparison)(ptr) = ServiceMetricSpecConditionsConditionComparison{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceMetricSpecConditionsConditionComparison

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparison{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceMetricSpecConditionsConditionComparison)(ptr) = objs[0]
			} else {
				*(*ServiceMetricSpecConditionsConditionComparison)(ptr) = ServiceMetricSpecConditionsConditionComparison{}
			}
		} else {
			*(*ServiceMetricSpecConditionsConditionComparison)(ptr) = ServiceMetricSpecConditionsConditionComparison{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceMetricSpecConditionsConditionComparison

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparison{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceMetricSpecConditionsConditionComparison)(ptr) = obj
		} else {
			*(*ServiceMetricSpecConditionsConditionComparison)(ptr) = ServiceMetricSpecConditionsConditionComparison{}
		}
	default:
		iter.ReportError("decode ServiceMetricSpecConditionsConditionComparison", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceMetricSpecConditionsConditionComparisonBooleanCodec struct {
}

func (ServiceMetricSpecConditionsConditionComparisonBooleanCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceMetricSpecConditionsConditionComparisonBoolean)(ptr) == nil
}

func (ServiceMetricSpecConditionsConditionComparisonBooleanCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceMetricSpecConditionsConditionComparisonBoolean)(ptr)
	var objs []ServiceMetricSpecConditionsConditionComparisonBoolean
	if obj != nil {
		objs = []ServiceMetricSpecConditionsConditionComparisonBoolean{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonBoolean{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceMetricSpecConditionsConditionComparisonBooleanCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceMetricSpecConditionsConditionComparisonBoolean)(ptr) = ServiceMetricSpecConditionsConditionComparisonBoolean{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceMetricSpecConditionsConditionComparisonBoolean

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonBoolean{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceMetricSpecConditionsConditionComparisonBoolean)(ptr) = objs[0]
			} else {
				*(*ServiceMetricSpecConditionsConditionComparisonBoolean)(ptr) = ServiceMetricSpecConditionsConditionComparisonBoolean{}
			}
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonBoolean)(ptr) = ServiceMetricSpecConditionsConditionComparisonBoolean{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceMetricSpecConditionsConditionComparisonBoolean

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonBoolean{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceMetricSpecConditionsConditionComparisonBoolean)(ptr) = obj
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonBoolean)(ptr) = ServiceMetricSpecConditionsConditionComparisonBoolean{}
		}
	default:
		iter.ReportError("decode ServiceMetricSpecConditionsConditionComparisonBoolean", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceMetricSpecConditionsConditionComparisonEsbInputNodeTypeCodec struct {
}

func (ServiceMetricSpecConditionsConditionComparisonEsbInputNodeTypeCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceMetricSpecConditionsConditionComparisonEsbInputNodeType)(ptr) == nil
}

func (ServiceMetricSpecConditionsConditionComparisonEsbInputNodeTypeCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceMetricSpecConditionsConditionComparisonEsbInputNodeType)(ptr)
	var objs []ServiceMetricSpecConditionsConditionComparisonEsbInputNodeType
	if obj != nil {
		objs = []ServiceMetricSpecConditionsConditionComparisonEsbInputNodeType{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonEsbInputNodeType{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceMetricSpecConditionsConditionComparisonEsbInputNodeTypeCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceMetricSpecConditionsConditionComparisonEsbInputNodeType)(ptr) = ServiceMetricSpecConditionsConditionComparisonEsbInputNodeType{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceMetricSpecConditionsConditionComparisonEsbInputNodeType

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonEsbInputNodeType{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceMetricSpecConditionsConditionComparisonEsbInputNodeType)(ptr) = objs[0]
			} else {
				*(*ServiceMetricSpecConditionsConditionComparisonEsbInputNodeType)(ptr) = ServiceMetricSpecConditionsConditionComparisonEsbInputNodeType{}
			}
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonEsbInputNodeType)(ptr) = ServiceMetricSpecConditionsConditionComparisonEsbInputNodeType{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceMetricSpecConditionsConditionComparisonEsbInputNodeType

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonEsbInputNodeType{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceMetricSpecConditionsConditionComparisonEsbInputNodeType)(ptr) = obj
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonEsbInputNodeType)(ptr) = ServiceMetricSpecConditionsConditionComparisonEsbInputNodeType{}
		}
	default:
		iter.ReportError("decode ServiceMetricSpecConditionsConditionComparisonEsbInputNodeType", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceMetricSpecConditionsConditionComparisonFailedStateCodec struct {
}

func (ServiceMetricSpecConditionsConditionComparisonFailedStateCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceMetricSpecConditionsConditionComparisonFailedState)(ptr) == nil
}

func (ServiceMetricSpecConditionsConditionComparisonFailedStateCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceMetricSpecConditionsConditionComparisonFailedState)(ptr)
	var objs []ServiceMetricSpecConditionsConditionComparisonFailedState
	if obj != nil {
		objs = []ServiceMetricSpecConditionsConditionComparisonFailedState{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonFailedState{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceMetricSpecConditionsConditionComparisonFailedStateCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceMetricSpecConditionsConditionComparisonFailedState)(ptr) = ServiceMetricSpecConditionsConditionComparisonFailedState{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceMetricSpecConditionsConditionComparisonFailedState

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonFailedState{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceMetricSpecConditionsConditionComparisonFailedState)(ptr) = objs[0]
			} else {
				*(*ServiceMetricSpecConditionsConditionComparisonFailedState)(ptr) = ServiceMetricSpecConditionsConditionComparisonFailedState{}
			}
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonFailedState)(ptr) = ServiceMetricSpecConditionsConditionComparisonFailedState{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceMetricSpecConditionsConditionComparisonFailedState

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonFailedState{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceMetricSpecConditionsConditionComparisonFailedState)(ptr) = obj
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonFailedState)(ptr) = ServiceMetricSpecConditionsConditionComparisonFailedState{}
		}
	default:
		iter.ReportError("decode ServiceMetricSpecConditionsConditionComparisonFailedState", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceMetricSpecConditionsConditionComparisonFailureReasonCodec struct {
}

func (ServiceMetricSpecConditionsConditionComparisonFailureReasonCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceMetricSpecConditionsConditionComparisonFailureReason)(ptr) == nil
}

func (ServiceMetricSpecConditionsConditionComparisonFailureReasonCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceMetricSpecConditionsConditionComparisonFailureReason)(ptr)
	var objs []ServiceMetricSpecConditionsConditionComparisonFailureReason
	if obj != nil {
		objs = []ServiceMetricSpecConditionsConditionComparisonFailureReason{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonFailureReason{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceMetricSpecConditionsConditionComparisonFailureReasonCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceMetricSpecConditionsConditionComparisonFailureReason)(ptr) = ServiceMetricSpecConditionsConditionComparisonFailureReason{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceMetricSpecConditionsConditionComparisonFailureReason

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonFailureReason{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceMetricSpecConditionsConditionComparisonFailureReason)(ptr) = objs[0]
			} else {
				*(*ServiceMetricSpecConditionsConditionComparisonFailureReason)(ptr) = ServiceMetricSpecConditionsConditionComparisonFailureReason{}
			}
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonFailureReason)(ptr) = ServiceMetricSpecConditionsConditionComparisonFailureReason{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceMetricSpecConditionsConditionComparisonFailureReason

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonFailureReason{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceMetricSpecConditionsConditionComparisonFailureReason)(ptr) = obj
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonFailureReason)(ptr) = ServiceMetricSpecConditionsConditionComparisonFailureReason{}
		}
	default:
		iter.ReportError("decode ServiceMetricSpecConditionsConditionComparisonFailureReason", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceMetricSpecConditionsConditionComparisonFastStringCodec struct {
}

func (ServiceMetricSpecConditionsConditionComparisonFastStringCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceMetricSpecConditionsConditionComparisonFastString)(ptr) == nil
}

func (ServiceMetricSpecConditionsConditionComparisonFastStringCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceMetricSpecConditionsConditionComparisonFastString)(ptr)
	var objs []ServiceMetricSpecConditionsConditionComparisonFastString
	if obj != nil {
		objs = []ServiceMetricSpecConditionsConditionComparisonFastString{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonFastString{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceMetricSpecConditionsConditionComparisonFastStringCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceMetricSpecConditionsConditionComparisonFastString)(ptr) = ServiceMetricSpecConditionsConditionComparisonFastString{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceMetricSpecConditionsConditionComparisonFastString

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonFastString{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceMetricSpecConditionsConditionComparisonFastString)(ptr) = objs[0]
			} else {
				*(*ServiceMetricSpecConditionsConditionComparisonFastString)(ptr) = ServiceMetricSpecConditionsConditionComparisonFastString{}
			}
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonFastString)(ptr) = ServiceMetricSpecConditionsConditionComparisonFastString{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceMetricSpecConditionsConditionComparisonFastString

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonFastString{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceMetricSpecConditionsConditionComparisonFastString)(ptr) = obj
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonFastString)(ptr) = ServiceMetricSpecConditionsConditionComparisonFastString{}
		}
	default:
		iter.ReportError("decode ServiceMetricSpecConditionsConditionComparisonFastString", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceMetricSpecConditionsConditionComparisonFlawStateCodec struct {
}

func (ServiceMetricSpecConditionsConditionComparisonFlawStateCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceMetricSpecConditionsConditionComparisonFlawState)(ptr) == nil
}

func (ServiceMetricSpecConditionsConditionComparisonFlawStateCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceMetricSpecConditionsConditionComparisonFlawState)(ptr)
	var objs []ServiceMetricSpecConditionsConditionComparisonFlawState
	if obj != nil {
		objs = []ServiceMetricSpecConditionsConditionComparisonFlawState{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonFlawState{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceMetricSpecConditionsConditionComparisonFlawStateCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceMetricSpecConditionsConditionComparisonFlawState)(ptr) = ServiceMetricSpecConditionsConditionComparisonFlawState{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceMetricSpecConditionsConditionComparisonFlawState

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonFlawState{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceMetricSpecConditionsConditionComparisonFlawState)(ptr) = objs[0]
			} else {
				*(*ServiceMetricSpecConditionsConditionComparisonFlawState)(ptr) = ServiceMetricSpecConditionsConditionComparisonFlawState{}
			}
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonFlawState)(ptr) = ServiceMetricSpecConditionsConditionComparisonFlawState{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceMetricSpecConditionsConditionComparisonFlawState

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonFlawState{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceMetricSpecConditionsConditionComparisonFlawState)(ptr) = obj
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonFlawState)(ptr) = ServiceMetricSpecConditionsConditionComparisonFlawState{}
		}
	default:
		iter.ReportError("decode ServiceMetricSpecConditionsConditionComparisonFlawState", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceMetricSpecConditionsConditionComparisonGenericCodec struct {
}

func (ServiceMetricSpecConditionsConditionComparisonGenericCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceMetricSpecConditionsConditionComparisonGeneric)(ptr) == nil
}

func (ServiceMetricSpecConditionsConditionComparisonGenericCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceMetricSpecConditionsConditionComparisonGeneric)(ptr)
	var objs []ServiceMetricSpecConditionsConditionComparisonGeneric
	if obj != nil {
		objs = []ServiceMetricSpecConditionsConditionComparisonGeneric{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonGeneric{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceMetricSpecConditionsConditionComparisonGenericCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceMetricSpecConditionsConditionComparisonGeneric)(ptr) = ServiceMetricSpecConditionsConditionComparisonGeneric{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceMetricSpecConditionsConditionComparisonGeneric

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonGeneric{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceMetricSpecConditionsConditionComparisonGeneric)(ptr) = objs[0]
			} else {
				*(*ServiceMetricSpecConditionsConditionComparisonGeneric)(ptr) = ServiceMetricSpecConditionsConditionComparisonGeneric{}
			}
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonGeneric)(ptr) = ServiceMetricSpecConditionsConditionComparisonGeneric{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceMetricSpecConditionsConditionComparisonGeneric

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonGeneric{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceMetricSpecConditionsConditionComparisonGeneric)(ptr) = obj
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonGeneric)(ptr) = ServiceMetricSpecConditionsConditionComparisonGeneric{}
		}
	default:
		iter.ReportError("decode ServiceMetricSpecConditionsConditionComparisonGeneric", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceMetricSpecConditionsConditionComparisonHttpMethodCodec struct {
}

func (ServiceMetricSpecConditionsConditionComparisonHttpMethodCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceMetricSpecConditionsConditionComparisonHttpMethod)(ptr) == nil
}

func (ServiceMetricSpecConditionsConditionComparisonHttpMethodCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceMetricSpecConditionsConditionComparisonHttpMethod)(ptr)
	var objs []ServiceMetricSpecConditionsConditionComparisonHttpMethod
	if obj != nil {
		objs = []ServiceMetricSpecConditionsConditionComparisonHttpMethod{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonHttpMethod{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceMetricSpecConditionsConditionComparisonHttpMethodCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceMetricSpecConditionsConditionComparisonHttpMethod)(ptr) = ServiceMetricSpecConditionsConditionComparisonHttpMethod{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceMetricSpecConditionsConditionComparisonHttpMethod

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonHttpMethod{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceMetricSpecConditionsConditionComparisonHttpMethod)(ptr) = objs[0]
			} else {
				*(*ServiceMetricSpecConditionsConditionComparisonHttpMethod)(ptr) = ServiceMetricSpecConditionsConditionComparisonHttpMethod{}
			}
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonHttpMethod)(ptr) = ServiceMetricSpecConditionsConditionComparisonHttpMethod{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceMetricSpecConditionsConditionComparisonHttpMethod

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonHttpMethod{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceMetricSpecConditionsConditionComparisonHttpMethod)(ptr) = obj
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonHttpMethod)(ptr) = ServiceMetricSpecConditionsConditionComparisonHttpMethod{}
		}
	default:
		iter.ReportError("decode ServiceMetricSpecConditionsConditionComparisonHttpMethod", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceMetricSpecConditionsConditionComparisonHttpStatusClassCodec struct {
}

func (ServiceMetricSpecConditionsConditionComparisonHttpStatusClassCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceMetricSpecConditionsConditionComparisonHttpStatusClass)(ptr) == nil
}

func (ServiceMetricSpecConditionsConditionComparisonHttpStatusClassCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceMetricSpecConditionsConditionComparisonHttpStatusClass)(ptr)
	var objs []ServiceMetricSpecConditionsConditionComparisonHttpStatusClass
	if obj != nil {
		objs = []ServiceMetricSpecConditionsConditionComparisonHttpStatusClass{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonHttpStatusClass{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceMetricSpecConditionsConditionComparisonHttpStatusClassCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceMetricSpecConditionsConditionComparisonHttpStatusClass)(ptr) = ServiceMetricSpecConditionsConditionComparisonHttpStatusClass{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceMetricSpecConditionsConditionComparisonHttpStatusClass

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonHttpStatusClass{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceMetricSpecConditionsConditionComparisonHttpStatusClass)(ptr) = objs[0]
			} else {
				*(*ServiceMetricSpecConditionsConditionComparisonHttpStatusClass)(ptr) = ServiceMetricSpecConditionsConditionComparisonHttpStatusClass{}
			}
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonHttpStatusClass)(ptr) = ServiceMetricSpecConditionsConditionComparisonHttpStatusClass{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceMetricSpecConditionsConditionComparisonHttpStatusClass

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonHttpStatusClass{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceMetricSpecConditionsConditionComparisonHttpStatusClass)(ptr) = obj
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonHttpStatusClass)(ptr) = ServiceMetricSpecConditionsConditionComparisonHttpStatusClass{}
		}
	default:
		iter.ReportError("decode ServiceMetricSpecConditionsConditionComparisonHttpStatusClass", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceMetricSpecConditionsConditionComparisonIibInputNodeTypeCodec struct {
}

func (ServiceMetricSpecConditionsConditionComparisonIibInputNodeTypeCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceMetricSpecConditionsConditionComparisonIibInputNodeType)(ptr) == nil
}

func (ServiceMetricSpecConditionsConditionComparisonIibInputNodeTypeCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceMetricSpecConditionsConditionComparisonIibInputNodeType)(ptr)
	var objs []ServiceMetricSpecConditionsConditionComparisonIibInputNodeType
	if obj != nil {
		objs = []ServiceMetricSpecConditionsConditionComparisonIibInputNodeType{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonIibInputNodeType{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceMetricSpecConditionsConditionComparisonIibInputNodeTypeCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceMetricSpecConditionsConditionComparisonIibInputNodeType)(ptr) = ServiceMetricSpecConditionsConditionComparisonIibInputNodeType{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceMetricSpecConditionsConditionComparisonIibInputNodeType

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonIibInputNodeType{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceMetricSpecConditionsConditionComparisonIibInputNodeType)(ptr) = objs[0]
			} else {
				*(*ServiceMetricSpecConditionsConditionComparisonIibInputNodeType)(ptr) = ServiceMetricSpecConditionsConditionComparisonIibInputNodeType{}
			}
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonIibInputNodeType)(ptr) = ServiceMetricSpecConditionsConditionComparisonIibInputNodeType{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceMetricSpecConditionsConditionComparisonIibInputNodeType

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonIibInputNodeType{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceMetricSpecConditionsConditionComparisonIibInputNodeType)(ptr) = obj
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonIibInputNodeType)(ptr) = ServiceMetricSpecConditionsConditionComparisonIibInputNodeType{}
		}
	default:
		iter.ReportError("decode ServiceMetricSpecConditionsConditionComparisonIibInputNodeType", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceMetricSpecConditionsConditionComparisonNumberCodec struct {
}

func (ServiceMetricSpecConditionsConditionComparisonNumberCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceMetricSpecConditionsConditionComparisonNumber)(ptr) == nil
}

func (ServiceMetricSpecConditionsConditionComparisonNumberCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceMetricSpecConditionsConditionComparisonNumber)(ptr)
	var objs []ServiceMetricSpecConditionsConditionComparisonNumber
	if obj != nil {
		objs = []ServiceMetricSpecConditionsConditionComparisonNumber{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonNumber{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceMetricSpecConditionsConditionComparisonNumberCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceMetricSpecConditionsConditionComparisonNumber)(ptr) = ServiceMetricSpecConditionsConditionComparisonNumber{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceMetricSpecConditionsConditionComparisonNumber

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonNumber{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceMetricSpecConditionsConditionComparisonNumber)(ptr) = objs[0]
			} else {
				*(*ServiceMetricSpecConditionsConditionComparisonNumber)(ptr) = ServiceMetricSpecConditionsConditionComparisonNumber{}
			}
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonNumber)(ptr) = ServiceMetricSpecConditionsConditionComparisonNumber{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceMetricSpecConditionsConditionComparisonNumber

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonNumber{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceMetricSpecConditionsConditionComparisonNumber)(ptr) = obj
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonNumber)(ptr) = ServiceMetricSpecConditionsConditionComparisonNumber{}
		}
	default:
		iter.ReportError("decode ServiceMetricSpecConditionsConditionComparisonNumber", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeCodec struct {
}

func (ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceMetricSpecConditionsConditionComparisonNumberRequestAttribute)(ptr) == nil
}

func (ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceMetricSpecConditionsConditionComparisonNumberRequestAttribute)(ptr)
	var objs []ServiceMetricSpecConditionsConditionComparisonNumberRequestAttribute
	if obj != nil {
		objs = []ServiceMetricSpecConditionsConditionComparisonNumberRequestAttribute{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonNumberRequestAttribute{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceMetricSpecConditionsConditionComparisonNumberRequestAttribute)(ptr) = ServiceMetricSpecConditionsConditionComparisonNumberRequestAttribute{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceMetricSpecConditionsConditionComparisonNumberRequestAttribute

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonNumberRequestAttribute{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceMetricSpecConditionsConditionComparisonNumberRequestAttribute)(ptr) = objs[0]
			} else {
				*(*ServiceMetricSpecConditionsConditionComparisonNumberRequestAttribute)(ptr) = ServiceMetricSpecConditionsConditionComparisonNumberRequestAttribute{}
			}
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonNumberRequestAttribute)(ptr) = ServiceMetricSpecConditionsConditionComparisonNumberRequestAttribute{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceMetricSpecConditionsConditionComparisonNumberRequestAttribute

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonNumberRequestAttribute{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceMetricSpecConditionsConditionComparisonNumberRequestAttribute)(ptr) = obj
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonNumberRequestAttribute)(ptr) = ServiceMetricSpecConditionsConditionComparisonNumberRequestAttribute{}
		}
	default:
		iter.ReportError("decode ServiceMetricSpecConditionsConditionComparisonNumberRequestAttribute", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceCodec struct {
}

func (ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSource)(ptr) == nil
}

func (ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSource)(ptr)
	var objs []ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSource
	if obj != nil {
		objs = []ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSource{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSource{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSource)(ptr) = ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSource{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSource

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSource{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSource)(ptr) = objs[0]
			} else {
				*(*ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSource)(ptr) = ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSource{}
			}
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSource)(ptr) = ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSource{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSource

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSource{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSource)(ptr) = obj
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSource)(ptr) = ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSource{}
		}
	default:
		iter.ReportError("decode ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSource", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTagCodec struct {
}

func (ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTagCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTag)(ptr) == nil
}

func (ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTagCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTag)(ptr)
	var objs []ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTag
	if obj != nil {
		objs = []ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTag{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTag{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTagCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTag)(ptr) = ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTag{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTag

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTag{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTag)(ptr) = objs[0]
			} else {
				*(*ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTag)(ptr) = ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTag{}
			}
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTag)(ptr) = ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTag{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTag

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTag{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTag)(ptr) = obj
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTag)(ptr) = ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTag{}
		}
	default:
		iter.ReportError("decode ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTag", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTagTagKeyCodec struct {
}

func (ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTagTagKeyCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTagTagKey)(ptr) == nil
}

func (ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTagTagKeyCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTagTagKey)(ptr)
	var objs []ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTagTagKey
	if obj != nil {
		objs = []ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTagTagKey{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTagTagKey{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTagTagKeyCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTagTagKey)(ptr) = ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTagTagKey{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTagTagKey

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTagTagKey{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTagTagKey)(ptr) = objs[0]
			} else {
				*(*ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTagTagKey)(ptr) = ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTagTagKey{}
			}
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTagTagKey)(ptr) = ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTagTagKey{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTagTagKey

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTagTagKey{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTagTagKey)(ptr) = obj
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTagTagKey)(ptr) = ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTagTagKey{}
		}
	default:
		iter.ReportError("decode ServiceMetricSpecConditionsConditionComparisonNumberRequestAttributeSourceServiceTagTagKey", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceMetricSpecConditionsConditionComparisonServiceTypeCodec struct {
}

func (ServiceMetricSpecConditionsConditionComparisonServiceTypeCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceMetricSpecConditionsConditionComparisonServiceType)(ptr) == nil
}

func (ServiceMetricSpecConditionsConditionComparisonServiceTypeCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceMetricSpecConditionsConditionComparisonServiceType)(ptr)
	var objs []ServiceMetricSpecConditionsConditionComparisonServiceType
	if obj != nil {
		objs = []ServiceMetricSpecConditionsConditionComparisonServiceType{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonServiceType{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceMetricSpecConditionsConditionComparisonServiceTypeCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceMetricSpecConditionsConditionComparisonServiceType)(ptr) = ServiceMetricSpecConditionsConditionComparisonServiceType{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceMetricSpecConditionsConditionComparisonServiceType

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonServiceType{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceMetricSpecConditionsConditionComparisonServiceType)(ptr) = objs[0]
			} else {
				*(*ServiceMetricSpecConditionsConditionComparisonServiceType)(ptr) = ServiceMetricSpecConditionsConditionComparisonServiceType{}
			}
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonServiceType)(ptr) = ServiceMetricSpecConditionsConditionComparisonServiceType{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceMetricSpecConditionsConditionComparisonServiceType

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonServiceType{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceMetricSpecConditionsConditionComparisonServiceType)(ptr) = obj
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonServiceType)(ptr) = ServiceMetricSpecConditionsConditionComparisonServiceType{}
		}
	default:
		iter.ReportError("decode ServiceMetricSpecConditionsConditionComparisonServiceType", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceMetricSpecConditionsConditionComparisonStringCodec struct {
}

func (ServiceMetricSpecConditionsConditionComparisonStringCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceMetricSpecConditionsConditionComparisonString)(ptr) == nil
}

func (ServiceMetricSpecConditionsConditionComparisonStringCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceMetricSpecConditionsConditionComparisonString)(ptr)
	var objs []ServiceMetricSpecConditionsConditionComparisonString
	if obj != nil {
		objs = []ServiceMetricSpecConditionsConditionComparisonString{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonString{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceMetricSpecConditionsConditionComparisonStringCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceMetricSpecConditionsConditionComparisonString)(ptr) = ServiceMetricSpecConditionsConditionComparisonString{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceMetricSpecConditionsConditionComparisonString

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonString{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceMetricSpecConditionsConditionComparisonString)(ptr) = objs[0]
			} else {
				*(*ServiceMetricSpecConditionsConditionComparisonString)(ptr) = ServiceMetricSpecConditionsConditionComparisonString{}
			}
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonString)(ptr) = ServiceMetricSpecConditionsConditionComparisonString{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceMetricSpecConditionsConditionComparisonString

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonString{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceMetricSpecConditionsConditionComparisonString)(ptr) = obj
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonString)(ptr) = ServiceMetricSpecConditionsConditionComparisonString{}
		}
	default:
		iter.ReportError("decode ServiceMetricSpecConditionsConditionComparisonString", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeCodec struct {
}

func (ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceMetricSpecConditionsConditionComparisonStringRequestAttribute)(ptr) == nil
}

func (ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceMetricSpecConditionsConditionComparisonStringRequestAttribute)(ptr)
	var objs []ServiceMetricSpecConditionsConditionComparisonStringRequestAttribute
	if obj != nil {
		objs = []ServiceMetricSpecConditionsConditionComparisonStringRequestAttribute{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonStringRequestAttribute{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceMetricSpecConditionsConditionComparisonStringRequestAttribute)(ptr) = ServiceMetricSpecConditionsConditionComparisonStringRequestAttribute{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceMetricSpecConditionsConditionComparisonStringRequestAttribute

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonStringRequestAttribute{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceMetricSpecConditionsConditionComparisonStringRequestAttribute)(ptr) = objs[0]
			} else {
				*(*ServiceMetricSpecConditionsConditionComparisonStringRequestAttribute)(ptr) = ServiceMetricSpecConditionsConditionComparisonStringRequestAttribute{}
			}
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonStringRequestAttribute)(ptr) = ServiceMetricSpecConditionsConditionComparisonStringRequestAttribute{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceMetricSpecConditionsConditionComparisonStringRequestAttribute

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonStringRequestAttribute{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceMetricSpecConditionsConditionComparisonStringRequestAttribute)(ptr) = obj
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonStringRequestAttribute)(ptr) = ServiceMetricSpecConditionsConditionComparisonStringRequestAttribute{}
		}
	default:
		iter.ReportError("decode ServiceMetricSpecConditionsConditionComparisonStringRequestAttribute", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceCodec struct {
}

func (ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSource)(ptr) == nil
}

func (ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSource)(ptr)
	var objs []ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSource
	if obj != nil {
		objs = []ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSource{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSource{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSource)(ptr) = ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSource{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSource

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSource{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSource)(ptr) = objs[0]
			} else {
				*(*ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSource)(ptr) = ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSource{}
			}
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSource)(ptr) = ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSource{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSource

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSource{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSource)(ptr) = obj
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSource)(ptr) = ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSource{}
		}
	default:
		iter.ReportError("decode ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSource", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTagCodec struct {
}

func (ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTagCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTag)(ptr) == nil
}

func (ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTagCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTag)(ptr)
	var objs []ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTag
	if obj != nil {
		objs = []ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTag{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTag{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTagCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTag)(ptr) = ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTag{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTag

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTag{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTag)(ptr) = objs[0]
			} else {
				*(*ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTag)(ptr) = ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTag{}
			}
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTag)(ptr) = ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTag{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTag

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTag{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTag)(ptr) = obj
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTag)(ptr) = ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTag{}
		}
	default:
		iter.ReportError("decode ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTag", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTagTagKeyCodec struct {
}

func (ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTagTagKeyCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTagTagKey)(ptr) == nil
}

func (ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTagTagKeyCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTagTagKey)(ptr)
	var objs []ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTagTagKey
	if obj != nil {
		objs = []ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTagTagKey{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTagTagKey{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTagTagKeyCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTagTagKey)(ptr) = ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTagTagKey{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTagTagKey

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTagTagKey{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTagTagKey)(ptr) = objs[0]
			} else {
				*(*ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTagTagKey)(ptr) = ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTagTagKey{}
			}
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTagTagKey)(ptr) = ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTagTagKey{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTagTagKey

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTagTagKey{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTagTagKey)(ptr) = obj
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTagTagKey)(ptr) = ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTagTagKey{}
		}
	default:
		iter.ReportError("decode ServiceMetricSpecConditionsConditionComparisonStringRequestAttributeSourceServiceTagTagKey", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceMetricSpecConditionsConditionComparisonTagCodec struct {
}

func (ServiceMetricSpecConditionsConditionComparisonTagCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceMetricSpecConditionsConditionComparisonTag)(ptr) == nil
}

func (ServiceMetricSpecConditionsConditionComparisonTagCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceMetricSpecConditionsConditionComparisonTag)(ptr)
	var objs []ServiceMetricSpecConditionsConditionComparisonTag
	if obj != nil {
		objs = []ServiceMetricSpecConditionsConditionComparisonTag{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonTag{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceMetricSpecConditionsConditionComparisonTagCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceMetricSpecConditionsConditionComparisonTag)(ptr) = ServiceMetricSpecConditionsConditionComparisonTag{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceMetricSpecConditionsConditionComparisonTag

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonTag{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceMetricSpecConditionsConditionComparisonTag)(ptr) = objs[0]
			} else {
				*(*ServiceMetricSpecConditionsConditionComparisonTag)(ptr) = ServiceMetricSpecConditionsConditionComparisonTag{}
			}
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonTag)(ptr) = ServiceMetricSpecConditionsConditionComparisonTag{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceMetricSpecConditionsConditionComparisonTag

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonTag{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceMetricSpecConditionsConditionComparisonTag)(ptr) = obj
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonTag)(ptr) = ServiceMetricSpecConditionsConditionComparisonTag{}
		}
	default:
		iter.ReportError("decode ServiceMetricSpecConditionsConditionComparisonTag", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceMetricSpecConditionsConditionComparisonTagValueCodec struct {
}

func (ServiceMetricSpecConditionsConditionComparisonTagValueCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceMetricSpecConditionsConditionComparisonTagValue)(ptr) == nil
}

func (ServiceMetricSpecConditionsConditionComparisonTagValueCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceMetricSpecConditionsConditionComparisonTagValue)(ptr)
	var objs []ServiceMetricSpecConditionsConditionComparisonTagValue
	if obj != nil {
		objs = []ServiceMetricSpecConditionsConditionComparisonTagValue{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonTagValue{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceMetricSpecConditionsConditionComparisonTagValueCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceMetricSpecConditionsConditionComparisonTagValue)(ptr) = ServiceMetricSpecConditionsConditionComparisonTagValue{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceMetricSpecConditionsConditionComparisonTagValue

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonTagValue{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceMetricSpecConditionsConditionComparisonTagValue)(ptr) = objs[0]
			} else {
				*(*ServiceMetricSpecConditionsConditionComparisonTagValue)(ptr) = ServiceMetricSpecConditionsConditionComparisonTagValue{}
			}
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonTagValue)(ptr) = ServiceMetricSpecConditionsConditionComparisonTagValue{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceMetricSpecConditionsConditionComparisonTagValue

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonTagValue{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceMetricSpecConditionsConditionComparisonTagValue)(ptr) = obj
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonTagValue)(ptr) = ServiceMetricSpecConditionsConditionComparisonTagValue{}
		}
	default:
		iter.ReportError("decode ServiceMetricSpecConditionsConditionComparisonTagValue", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceMetricSpecConditionsConditionComparisonTagValuesCodec struct {
}

func (ServiceMetricSpecConditionsConditionComparisonTagValuesCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceMetricSpecConditionsConditionComparisonTagValues)(ptr) == nil
}

func (ServiceMetricSpecConditionsConditionComparisonTagValuesCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceMetricSpecConditionsConditionComparisonTagValues)(ptr)
	var objs []ServiceMetricSpecConditionsConditionComparisonTagValues
	if obj != nil {
		objs = []ServiceMetricSpecConditionsConditionComparisonTagValues{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonTagValues{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceMetricSpecConditionsConditionComparisonTagValuesCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceMetricSpecConditionsConditionComparisonTagValues)(ptr) = ServiceMetricSpecConditionsConditionComparisonTagValues{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceMetricSpecConditionsConditionComparisonTagValues

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonTagValues{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceMetricSpecConditionsConditionComparisonTagValues)(ptr) = objs[0]
			} else {
				*(*ServiceMetricSpecConditionsConditionComparisonTagValues)(ptr) = ServiceMetricSpecConditionsConditionComparisonTagValues{}
			}
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonTagValues)(ptr) = ServiceMetricSpecConditionsConditionComparisonTagValues{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceMetricSpecConditionsConditionComparisonTagValues

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonTagValues{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceMetricSpecConditionsConditionComparisonTagValues)(ptr) = obj
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonTagValues)(ptr) = ServiceMetricSpecConditionsConditionComparisonTagValues{}
		}
	default:
		iter.ReportError("decode ServiceMetricSpecConditionsConditionComparisonTagValues", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceMetricSpecConditionsConditionComparisonZosCallTypeCodec struct {
}

func (ServiceMetricSpecConditionsConditionComparisonZosCallTypeCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceMetricSpecConditionsConditionComparisonZosCallType)(ptr) == nil
}

func (ServiceMetricSpecConditionsConditionComparisonZosCallTypeCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceMetricSpecConditionsConditionComparisonZosCallType)(ptr)
	var objs []ServiceMetricSpecConditionsConditionComparisonZosCallType
	if obj != nil {
		objs = []ServiceMetricSpecConditionsConditionComparisonZosCallType{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonZosCallType{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceMetricSpecConditionsConditionComparisonZosCallTypeCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceMetricSpecConditionsConditionComparisonZosCallType)(ptr) = ServiceMetricSpecConditionsConditionComparisonZosCallType{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceMetricSpecConditionsConditionComparisonZosCallType

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonZosCallType{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceMetricSpecConditionsConditionComparisonZosCallType)(ptr) = objs[0]
			} else {
				*(*ServiceMetricSpecConditionsConditionComparisonZosCallType)(ptr) = ServiceMetricSpecConditionsConditionComparisonZosCallType{}
			}
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonZosCallType)(ptr) = ServiceMetricSpecConditionsConditionComparisonZosCallType{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceMetricSpecConditionsConditionComparisonZosCallType

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecConditionsConditionComparisonZosCallType{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceMetricSpecConditionsConditionComparisonZosCallType)(ptr) = obj
		} else {
			*(*ServiceMetricSpecConditionsConditionComparisonZosCallType)(ptr) = ServiceMetricSpecConditionsConditionComparisonZosCallType{}
		}
	default:
		iter.ReportError("decode ServiceMetricSpecConditionsConditionComparisonZosCallType", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceMetricSpecDimensionDefinitionCodec struct {
}

func (ServiceMetricSpecDimensionDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceMetricSpecDimensionDefinition)(ptr) == nil
}

func (ServiceMetricSpecDimensionDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceMetricSpecDimensionDefinition)(ptr)
	var objs []ServiceMetricSpecDimensionDefinition
	if obj != nil {
		objs = []ServiceMetricSpecDimensionDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecDimensionDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceMetricSpecDimensionDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceMetricSpecDimensionDefinition)(ptr) = ServiceMetricSpecDimensionDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceMetricSpecDimensionDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecDimensionDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceMetricSpecDimensionDefinition)(ptr) = objs[0]
			} else {
				*(*ServiceMetricSpecDimensionDefinition)(ptr) = ServiceMetricSpecDimensionDefinition{}
			}
		} else {
			*(*ServiceMetricSpecDimensionDefinition)(ptr) = ServiceMetricSpecDimensionDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceMetricSpecDimensionDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecDimensionDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceMetricSpecDimensionDefinition)(ptr) = obj
		} else {
			*(*ServiceMetricSpecDimensionDefinition)(ptr) = ServiceMetricSpecDimensionDefinition{}
		}
	default:
		iter.ReportError("decode ServiceMetricSpecDimensionDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceMetricSpecDimensionDefinitionPlaceholdersCodec struct {
}

func (ServiceMetricSpecDimensionDefinitionPlaceholdersCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceMetricSpecDimensionDefinitionPlaceholders)(ptr) == nil
}

func (ServiceMetricSpecDimensionDefinitionPlaceholdersCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceMetricSpecDimensionDefinitionPlaceholders)(ptr)
	var objs []ServiceMetricSpecDimensionDefinitionPlaceholders
	if obj != nil {
		objs = []ServiceMetricSpecDimensionDefinitionPlaceholders{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecDimensionDefinitionPlaceholders{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceMetricSpecDimensionDefinitionPlaceholdersCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceMetricSpecDimensionDefinitionPlaceholders)(ptr) = ServiceMetricSpecDimensionDefinitionPlaceholders{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceMetricSpecDimensionDefinitionPlaceholders

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecDimensionDefinitionPlaceholders{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceMetricSpecDimensionDefinitionPlaceholders)(ptr) = objs[0]
			} else {
				*(*ServiceMetricSpecDimensionDefinitionPlaceholders)(ptr) = ServiceMetricSpecDimensionDefinitionPlaceholders{}
			}
		} else {
			*(*ServiceMetricSpecDimensionDefinitionPlaceholders)(ptr) = ServiceMetricSpecDimensionDefinitionPlaceholders{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceMetricSpecDimensionDefinitionPlaceholders

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecDimensionDefinitionPlaceholders{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceMetricSpecDimensionDefinitionPlaceholders)(ptr) = obj
		} else {
			*(*ServiceMetricSpecDimensionDefinitionPlaceholders)(ptr) = ServiceMetricSpecDimensionDefinitionPlaceholders{}
		}
	default:
		iter.ReportError("decode ServiceMetricSpecDimensionDefinitionPlaceholders", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceCodec struct {
}

func (ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSource)(ptr) == nil
}

func (ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSource)(ptr)
	var objs []ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSource
	if obj != nil {
		objs = []ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSource{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSource{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSource)(ptr) = ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSource{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSource

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSource{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSource)(ptr) = objs[0]
			} else {
				*(*ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSource)(ptr) = ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSource{}
			}
		} else {
			*(*ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSource)(ptr) = ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSource{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSource

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSource{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSource)(ptr) = obj
		} else {
			*(*ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSource)(ptr) = ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSource{}
		}
	default:
		iter.ReportError("decode ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSource", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagCodec struct {
}

func (ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTag)(ptr) == nil
}

func (ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTag)(ptr)
	var objs []ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTag
	if obj != nil {
		objs = []ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTag{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTag{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTag)(ptr) = ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTag{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTag

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTag{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTag)(ptr) = objs[0]
			} else {
				*(*ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTag)(ptr) = ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTag{}
			}
		} else {
			*(*ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTag)(ptr) = ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTag{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTag

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTag{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTag)(ptr) = obj
		} else {
			*(*ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTag)(ptr) = ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTag{}
		}
	default:
		iter.ReportError("decode ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTag", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagTagKeyCodec struct {
}

func (ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagTagKeyCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagTagKey)(ptr) == nil
}

func (ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagTagKeyCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagTagKey)(ptr)
	var objs []ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagTagKey
	if obj != nil {
		objs = []ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagTagKey{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagTagKey{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagTagKeyCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagTagKey)(ptr) = ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagTagKey{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagTagKey

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagTagKey{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagTagKey)(ptr) = objs[0]
			} else {
				*(*ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagTagKey)(ptr) = ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagTagKey{}
			}
		} else {
			*(*ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagTagKey)(ptr) = ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagTagKey{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagTagKey

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagTagKey{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagTagKey)(ptr) = obj
		} else {
			*(*ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagTagKey)(ptr) = ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagTagKey{}
		}
	default:
		iter.ReportError("decode ServiceMetricSpecDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagTagKey", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceMetricSpecMetricDefinitionCodec struct {
}

func (ServiceMetricSpecMetricDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceMetricSpecMetricDefinition)(ptr) == nil
}

func (ServiceMetricSpecMetricDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceMetricSpecMetricDefinition)(ptr)
	var objs []ServiceMetricSpecMetricDefinition
	if obj != nil {
		objs = []ServiceMetricSpecMetricDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecMetricDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceMetricSpecMetricDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceMetricSpecMetricDefinition)(ptr) = ServiceMetricSpecMetricDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceMetricSpecMetricDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecMetricDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceMetricSpecMetricDefinition)(ptr) = objs[0]
			} else {
				*(*ServiceMetricSpecMetricDefinition)(ptr) = ServiceMetricSpecMetricDefinition{}
			}
		} else {
			*(*ServiceMetricSpecMetricDefinition)(ptr) = ServiceMetricSpecMetricDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceMetricSpecMetricDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceMetricSpecMetricDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceMetricSpecMetricDefinition)(ptr) = obj
		} else {
			*(*ServiceMetricSpecMetricDefinition)(ptr) = ServiceMetricSpecMetricDefinition{}
		}
	default:
		iter.ReportError("decode ServiceMetricSpecMetricDefinition", "unexpected JSON type")
	}
}
