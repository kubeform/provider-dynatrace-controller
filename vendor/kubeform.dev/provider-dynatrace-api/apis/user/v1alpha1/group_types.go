/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Group struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GroupSpec   `json:"spec,omitempty"`
	Status            GroupStatus `json:"status,omitempty"`
}

type GroupSpecPermissionsGrant struct {
	// The ids of the environments this permission grants the user access to.
	// +optional
	Environments []string `json:"environments,omitempty" tf:"environments"`
	// The permission. Possible values are `VIEWER`, `MANAGE_SETTINGS`, `AGENT_INSTALL`, `LOG_VIEWER`, `VIEW_SENSITIVE_REQUEST_DATA`, `CONFIGURE_REQUEST_CAPTURE_DATA`, `REPLAY_SESSION_DATA`, `REPLAY_SESSION_DATA_WITHOUT_MASKING`, `MANAGE_SECURITY_PROBLEMS` and `MANAGE_SUPPORT_TICKETS`.
	Permission *string `json:"permission" tf:"permission"`
}

type GroupSpecPermissions struct {
	// A permission granted to one or multiple environments
	// +kubebuilder:validation:MinItems=1
	Grant []GroupSpecPermissionsGrant `json:"grant" tf:"grant"`
}

type GroupSpec struct {
	State *GroupSpecResource `json:"state,omitempty" tf:"-"`

	Resource GroupSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type GroupSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// If `true`, then the group has the access account rights
	// +optional
	AccessAccount *bool `json:"accessAccount,omitempty" tf:"access_account"`
	// If `true`, then the group has the cluster administrator rights
	// +optional
	ClusterAdmin *bool `json:"clusterAdmin,omitempty" tf:"cluster_admin"`
	// LDAP group names
	// +optional
	LdapGroups []string `json:"ldapGroups,omitempty" tf:"ldap_groups"`
	// If `true`, then the group has the manage account rights
	// +optional
	ManageAccount *bool `json:"manageAccount,omitempty" tf:"manage_account"`
	// The name of the user group
	Name *string `json:"name" tf:"name"`
	// Permissions for environments
	// +optional
	Permissions *GroupSpecPermissions `json:"permissions,omitempty" tf:"permissions"`
	// SSO group names. If defined it's used to map SSO group name to Dynatrace group name, otherwise mapping is done by group name
	// +optional
	SsoGroups []string `json:"ssoGroups,omitempty" tf:"sso_groups"`
}

type GroupStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// GroupList is a list of Groups
type GroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Group CRD objects
	Items []Group `json:"items,omitempty"`
}
