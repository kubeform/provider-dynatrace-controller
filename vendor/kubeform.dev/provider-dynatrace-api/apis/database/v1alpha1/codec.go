/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecDbConnectFailures{}).Type1()):      AnomaliesSpecDbConnectFailuresCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecFailureRate{}).Type1()):            AnomaliesSpecFailureRateCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecFailureRateAuto{}).Type1()):        AnomaliesSpecFailureRateAutoCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecFailureRateThresholds{}).Type1()):  AnomaliesSpecFailureRateThresholdsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecLoad{}).Type1()):                   AnomaliesSpecLoadCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecLoadDrops{}).Type1()):              AnomaliesSpecLoadDropsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecLoadSpikes{}).Type1()):             AnomaliesSpecLoadSpikesCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecResponseTime{}).Type1()):           AnomaliesSpecResponseTimeCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecResponseTimeAuto{}).Type1()):       AnomaliesSpecResponseTimeAutoCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecResponseTimeThresholds{}).Type1()): AnomaliesSpecResponseTimeThresholdsCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecDbConnectFailures{}).Type1()):      AnomaliesSpecDbConnectFailuresCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecFailureRate{}).Type1()):            AnomaliesSpecFailureRateCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecFailureRateAuto{}).Type1()):        AnomaliesSpecFailureRateAutoCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecFailureRateThresholds{}).Type1()):  AnomaliesSpecFailureRateThresholdsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecLoad{}).Type1()):                   AnomaliesSpecLoadCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecLoadDrops{}).Type1()):              AnomaliesSpecLoadDropsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecLoadSpikes{}).Type1()):             AnomaliesSpecLoadSpikesCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecResponseTime{}).Type1()):           AnomaliesSpecResponseTimeCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecResponseTimeAuto{}).Type1()):       AnomaliesSpecResponseTimeAutoCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecResponseTimeThresholds{}).Type1()): AnomaliesSpecResponseTimeThresholdsCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type AnomaliesSpecDbConnectFailuresCodec struct {
}

func (AnomaliesSpecDbConnectFailuresCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AnomaliesSpecDbConnectFailures)(ptr) == nil
}

func (AnomaliesSpecDbConnectFailuresCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AnomaliesSpecDbConnectFailures)(ptr)
	var objs []AnomaliesSpecDbConnectFailures
	if obj != nil {
		objs = []AnomaliesSpecDbConnectFailures{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecDbConnectFailures{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AnomaliesSpecDbConnectFailuresCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AnomaliesSpecDbConnectFailures)(ptr) = AnomaliesSpecDbConnectFailures{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AnomaliesSpecDbConnectFailures

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecDbConnectFailures{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AnomaliesSpecDbConnectFailures)(ptr) = objs[0]
			} else {
				*(*AnomaliesSpecDbConnectFailures)(ptr) = AnomaliesSpecDbConnectFailures{}
			}
		} else {
			*(*AnomaliesSpecDbConnectFailures)(ptr) = AnomaliesSpecDbConnectFailures{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj AnomaliesSpecDbConnectFailures

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecDbConnectFailures{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*AnomaliesSpecDbConnectFailures)(ptr) = obj
		} else {
			*(*AnomaliesSpecDbConnectFailures)(ptr) = AnomaliesSpecDbConnectFailures{}
		}
	default:
		iter.ReportError("decode AnomaliesSpecDbConnectFailures", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AnomaliesSpecFailureRateCodec struct {
}

func (AnomaliesSpecFailureRateCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AnomaliesSpecFailureRate)(ptr) == nil
}

func (AnomaliesSpecFailureRateCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AnomaliesSpecFailureRate)(ptr)
	var objs []AnomaliesSpecFailureRate
	if obj != nil {
		objs = []AnomaliesSpecFailureRate{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecFailureRate{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AnomaliesSpecFailureRateCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AnomaliesSpecFailureRate)(ptr) = AnomaliesSpecFailureRate{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AnomaliesSpecFailureRate

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecFailureRate{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AnomaliesSpecFailureRate)(ptr) = objs[0]
			} else {
				*(*AnomaliesSpecFailureRate)(ptr) = AnomaliesSpecFailureRate{}
			}
		} else {
			*(*AnomaliesSpecFailureRate)(ptr) = AnomaliesSpecFailureRate{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj AnomaliesSpecFailureRate

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecFailureRate{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*AnomaliesSpecFailureRate)(ptr) = obj
		} else {
			*(*AnomaliesSpecFailureRate)(ptr) = AnomaliesSpecFailureRate{}
		}
	default:
		iter.ReportError("decode AnomaliesSpecFailureRate", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AnomaliesSpecFailureRateAutoCodec struct {
}

func (AnomaliesSpecFailureRateAutoCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AnomaliesSpecFailureRateAuto)(ptr) == nil
}

func (AnomaliesSpecFailureRateAutoCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AnomaliesSpecFailureRateAuto)(ptr)
	var objs []AnomaliesSpecFailureRateAuto
	if obj != nil {
		objs = []AnomaliesSpecFailureRateAuto{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecFailureRateAuto{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AnomaliesSpecFailureRateAutoCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AnomaliesSpecFailureRateAuto)(ptr) = AnomaliesSpecFailureRateAuto{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AnomaliesSpecFailureRateAuto

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecFailureRateAuto{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AnomaliesSpecFailureRateAuto)(ptr) = objs[0]
			} else {
				*(*AnomaliesSpecFailureRateAuto)(ptr) = AnomaliesSpecFailureRateAuto{}
			}
		} else {
			*(*AnomaliesSpecFailureRateAuto)(ptr) = AnomaliesSpecFailureRateAuto{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj AnomaliesSpecFailureRateAuto

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecFailureRateAuto{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*AnomaliesSpecFailureRateAuto)(ptr) = obj
		} else {
			*(*AnomaliesSpecFailureRateAuto)(ptr) = AnomaliesSpecFailureRateAuto{}
		}
	default:
		iter.ReportError("decode AnomaliesSpecFailureRateAuto", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AnomaliesSpecFailureRateThresholdsCodec struct {
}

func (AnomaliesSpecFailureRateThresholdsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AnomaliesSpecFailureRateThresholds)(ptr) == nil
}

func (AnomaliesSpecFailureRateThresholdsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AnomaliesSpecFailureRateThresholds)(ptr)
	var objs []AnomaliesSpecFailureRateThresholds
	if obj != nil {
		objs = []AnomaliesSpecFailureRateThresholds{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecFailureRateThresholds{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AnomaliesSpecFailureRateThresholdsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AnomaliesSpecFailureRateThresholds)(ptr) = AnomaliesSpecFailureRateThresholds{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AnomaliesSpecFailureRateThresholds

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecFailureRateThresholds{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AnomaliesSpecFailureRateThresholds)(ptr) = objs[0]
			} else {
				*(*AnomaliesSpecFailureRateThresholds)(ptr) = AnomaliesSpecFailureRateThresholds{}
			}
		} else {
			*(*AnomaliesSpecFailureRateThresholds)(ptr) = AnomaliesSpecFailureRateThresholds{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj AnomaliesSpecFailureRateThresholds

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecFailureRateThresholds{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*AnomaliesSpecFailureRateThresholds)(ptr) = obj
		} else {
			*(*AnomaliesSpecFailureRateThresholds)(ptr) = AnomaliesSpecFailureRateThresholds{}
		}
	default:
		iter.ReportError("decode AnomaliesSpecFailureRateThresholds", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AnomaliesSpecLoadCodec struct {
}

func (AnomaliesSpecLoadCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AnomaliesSpecLoad)(ptr) == nil
}

func (AnomaliesSpecLoadCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AnomaliesSpecLoad)(ptr)
	var objs []AnomaliesSpecLoad
	if obj != nil {
		objs = []AnomaliesSpecLoad{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecLoad{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AnomaliesSpecLoadCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AnomaliesSpecLoad)(ptr) = AnomaliesSpecLoad{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AnomaliesSpecLoad

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecLoad{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AnomaliesSpecLoad)(ptr) = objs[0]
			} else {
				*(*AnomaliesSpecLoad)(ptr) = AnomaliesSpecLoad{}
			}
		} else {
			*(*AnomaliesSpecLoad)(ptr) = AnomaliesSpecLoad{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj AnomaliesSpecLoad

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecLoad{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*AnomaliesSpecLoad)(ptr) = obj
		} else {
			*(*AnomaliesSpecLoad)(ptr) = AnomaliesSpecLoad{}
		}
	default:
		iter.ReportError("decode AnomaliesSpecLoad", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AnomaliesSpecLoadDropsCodec struct {
}

func (AnomaliesSpecLoadDropsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AnomaliesSpecLoadDrops)(ptr) == nil
}

func (AnomaliesSpecLoadDropsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AnomaliesSpecLoadDrops)(ptr)
	var objs []AnomaliesSpecLoadDrops
	if obj != nil {
		objs = []AnomaliesSpecLoadDrops{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecLoadDrops{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AnomaliesSpecLoadDropsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AnomaliesSpecLoadDrops)(ptr) = AnomaliesSpecLoadDrops{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AnomaliesSpecLoadDrops

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecLoadDrops{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AnomaliesSpecLoadDrops)(ptr) = objs[0]
			} else {
				*(*AnomaliesSpecLoadDrops)(ptr) = AnomaliesSpecLoadDrops{}
			}
		} else {
			*(*AnomaliesSpecLoadDrops)(ptr) = AnomaliesSpecLoadDrops{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj AnomaliesSpecLoadDrops

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecLoadDrops{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*AnomaliesSpecLoadDrops)(ptr) = obj
		} else {
			*(*AnomaliesSpecLoadDrops)(ptr) = AnomaliesSpecLoadDrops{}
		}
	default:
		iter.ReportError("decode AnomaliesSpecLoadDrops", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AnomaliesSpecLoadSpikesCodec struct {
}

func (AnomaliesSpecLoadSpikesCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AnomaliesSpecLoadSpikes)(ptr) == nil
}

func (AnomaliesSpecLoadSpikesCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AnomaliesSpecLoadSpikes)(ptr)
	var objs []AnomaliesSpecLoadSpikes
	if obj != nil {
		objs = []AnomaliesSpecLoadSpikes{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecLoadSpikes{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AnomaliesSpecLoadSpikesCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AnomaliesSpecLoadSpikes)(ptr) = AnomaliesSpecLoadSpikes{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AnomaliesSpecLoadSpikes

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecLoadSpikes{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AnomaliesSpecLoadSpikes)(ptr) = objs[0]
			} else {
				*(*AnomaliesSpecLoadSpikes)(ptr) = AnomaliesSpecLoadSpikes{}
			}
		} else {
			*(*AnomaliesSpecLoadSpikes)(ptr) = AnomaliesSpecLoadSpikes{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj AnomaliesSpecLoadSpikes

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecLoadSpikes{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*AnomaliesSpecLoadSpikes)(ptr) = obj
		} else {
			*(*AnomaliesSpecLoadSpikes)(ptr) = AnomaliesSpecLoadSpikes{}
		}
	default:
		iter.ReportError("decode AnomaliesSpecLoadSpikes", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AnomaliesSpecResponseTimeCodec struct {
}

func (AnomaliesSpecResponseTimeCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AnomaliesSpecResponseTime)(ptr) == nil
}

func (AnomaliesSpecResponseTimeCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AnomaliesSpecResponseTime)(ptr)
	var objs []AnomaliesSpecResponseTime
	if obj != nil {
		objs = []AnomaliesSpecResponseTime{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecResponseTime{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AnomaliesSpecResponseTimeCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AnomaliesSpecResponseTime)(ptr) = AnomaliesSpecResponseTime{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AnomaliesSpecResponseTime

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecResponseTime{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AnomaliesSpecResponseTime)(ptr) = objs[0]
			} else {
				*(*AnomaliesSpecResponseTime)(ptr) = AnomaliesSpecResponseTime{}
			}
		} else {
			*(*AnomaliesSpecResponseTime)(ptr) = AnomaliesSpecResponseTime{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj AnomaliesSpecResponseTime

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecResponseTime{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*AnomaliesSpecResponseTime)(ptr) = obj
		} else {
			*(*AnomaliesSpecResponseTime)(ptr) = AnomaliesSpecResponseTime{}
		}
	default:
		iter.ReportError("decode AnomaliesSpecResponseTime", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AnomaliesSpecResponseTimeAutoCodec struct {
}

func (AnomaliesSpecResponseTimeAutoCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AnomaliesSpecResponseTimeAuto)(ptr) == nil
}

func (AnomaliesSpecResponseTimeAutoCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AnomaliesSpecResponseTimeAuto)(ptr)
	var objs []AnomaliesSpecResponseTimeAuto
	if obj != nil {
		objs = []AnomaliesSpecResponseTimeAuto{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecResponseTimeAuto{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AnomaliesSpecResponseTimeAutoCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AnomaliesSpecResponseTimeAuto)(ptr) = AnomaliesSpecResponseTimeAuto{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AnomaliesSpecResponseTimeAuto

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecResponseTimeAuto{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AnomaliesSpecResponseTimeAuto)(ptr) = objs[0]
			} else {
				*(*AnomaliesSpecResponseTimeAuto)(ptr) = AnomaliesSpecResponseTimeAuto{}
			}
		} else {
			*(*AnomaliesSpecResponseTimeAuto)(ptr) = AnomaliesSpecResponseTimeAuto{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj AnomaliesSpecResponseTimeAuto

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecResponseTimeAuto{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*AnomaliesSpecResponseTimeAuto)(ptr) = obj
		} else {
			*(*AnomaliesSpecResponseTimeAuto)(ptr) = AnomaliesSpecResponseTimeAuto{}
		}
	default:
		iter.ReportError("decode AnomaliesSpecResponseTimeAuto", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AnomaliesSpecResponseTimeThresholdsCodec struct {
}

func (AnomaliesSpecResponseTimeThresholdsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AnomaliesSpecResponseTimeThresholds)(ptr) == nil
}

func (AnomaliesSpecResponseTimeThresholdsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AnomaliesSpecResponseTimeThresholds)(ptr)
	var objs []AnomaliesSpecResponseTimeThresholds
	if obj != nil {
		objs = []AnomaliesSpecResponseTimeThresholds{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecResponseTimeThresholds{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AnomaliesSpecResponseTimeThresholdsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AnomaliesSpecResponseTimeThresholds)(ptr) = AnomaliesSpecResponseTimeThresholds{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AnomaliesSpecResponseTimeThresholds

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecResponseTimeThresholds{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AnomaliesSpecResponseTimeThresholds)(ptr) = objs[0]
			} else {
				*(*AnomaliesSpecResponseTimeThresholds)(ptr) = AnomaliesSpecResponseTimeThresholds{}
			}
		} else {
			*(*AnomaliesSpecResponseTimeThresholds)(ptr) = AnomaliesSpecResponseTimeThresholds{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj AnomaliesSpecResponseTimeThresholds

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomaliesSpecResponseTimeThresholds{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*AnomaliesSpecResponseTimeThresholds)(ptr) = obj
		} else {
			*(*AnomaliesSpecResponseTimeThresholds)(ptr) = AnomaliesSpecResponseTimeThresholds{}
		}
	default:
		iter.ReportError("decode AnomaliesSpecResponseTimeThresholds", "unexpected JSON type")
	}
}
